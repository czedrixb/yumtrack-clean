{"file_contents":{"AI_DOCUMENTATION.md":{"content":"# YumTrack AI Integration Documentation\n\n## Overview\n\nYumTrack leverages advanced AI technology to provide intelligent food recognition and comprehensive nutritional analysis. The application uses OpenAI's GPT-4o model with vision capabilities to analyze food images and extract detailed nutritional information.\n\n## AI Architecture\n\n### Core AI Engine: OpenAI GPT-4o\n\n**Model**: `gpt-4o` (GPT-4 Omni)\n- **Release**: May 13, 2024\n- **Capabilities**: Multimodal (text + vision)\n- **Specialization**: Food recognition and nutritional analysis\n- **API Provider**: OpenAI\n\n### AI Service Implementation\n\n**Location**: `server/services/openai.ts`\n\nThe AI service provides a single main function for food analysis:\n\n```typescript\nasync function analyzeFoodImage(base64Image: string): Promise<NutritionAnalysis>\n```\n\n#### Input Processing\n- **Image Format**: Base64-encoded image data\n- **Supported Types**: JPEG, PNG, WebP\n- **Size Limit**: 10MB maximum\n- **Preprocessing**: Client-side compression to optimize API calls\n\n#### AI Prompt Engineering\n\nThe system uses carefully crafted prompts to ensure accurate and consistent nutritional analysis:\n\n**System Role**: Professional nutritionist and food recognition expert\n**Response Format**: Structured JSON with enforced schema\n**Confidence Scoring**: Returns confidence level (0-1) for food identification accuracy\n\n#### Structured Output Schema\n\n```typescript\ninterface NutritionAnalysis {\n  foodName: string;              // Identified food item\n  confidence: number;            // AI confidence (0-1)\n  calories: number;              // Energy content in kcal\n  servingSize: string;           // Portion description\n  macronutrients: {\n    protein: number;             // Grams\n    carbohydrates: number;       // Grams\n    fat: number;                 // Grams\n    fiber?: number;              // Grams (optional)\n    sugar?: number;              // Grams (optional)\n    sodium?: number;             // Milligrams (optional)\n  };\n  vitamins: Array<{\n    name: string;                // Vitamin name\n    amount: string;              // Quantity with units\n    dailyValue: string;          // Percentage of daily value\n  }>;\n  minerals: Array<{\n    name: string;                // Mineral name\n    amount: string;              // Quantity with units\n    dailyValue: string;          // Percentage of daily value\n  }>;\n  healthInsights: string[];      // AI-generated health recommendations\n}\n```\n\n## AI Processing Pipeline\n\n### 1. Image Capture & Preprocessing\n\n**Frontend Components**:\n- `SimpleCamera`: Native camera integration\n- `CameraCapture`: Advanced camera controls\n- `CanvasCamera`: Canvas-based image manipulation\n\n**Image Optimization** (`client/src/lib/image-utils.ts`):\n```typescript\ncompressImage(imageData: string, maxWidth: 1024, quality: 0.8)\n```\n- Resizes images to maximum 1024px\n- Compresses to 80% quality\n- Converts to JPEG format\n- Reduces API payload size\n\n### 2. Server-Side Processing\n\n**Route Handler** (`server/routes.ts`):\n```typescript\nPOST /api/analyze-food\n```\n\n**Processing Steps**:\n1. **File Validation**: Multer middleware validates image type and size\n2. **Base64 Conversion**: Convert uploaded image to base64 string\n3. **AI Analysis**: Send to OpenAI GPT-4o for processing\n4. **Data Validation**: Verify response contains required fields\n5. **Storage**: Save analysis results to database\n6. **Response**: Return complete nutrition data to client\n\n### 3. Error Handling & Reliability\n\n**Validation Layers**:\n- Client-side file type validation\n- Server-side MIME type checking\n- AI response validation\n- Required field verification\n\n**Error Recovery**:\n- Graceful degradation for API failures\n- User-friendly error messages\n- Retry mechanisms for network issues\n- Confidence threshold warnings\n\n## AI Features & Capabilities\n\n### 1. Food Recognition\n\n**Accuracy Features**:\n- Multi-angle food detection\n- Portion size estimation\n- Ingredient identification\n- Preparation method recognition\n- Cultural cuisine awareness\n\n**Confidence Scoring**:\n- Returns confidence level (0-1)\n- Flags uncertain identifications (< 0.7)\n- Provides accuracy feedback to users\n\n### 2. Nutritional Analysis\n\n**Comprehensive Data**:\n- **Energy**: Calories/kcal calculation\n- **Macronutrients**: Protein, carbs, fat breakdown\n- **Micronutrients**: Vitamins and minerals\n- **Serving Size**: Realistic portion estimates\n- **Dietary Information**: Fiber, sugar, sodium content\n\n**Health Insights**:\n- AI-generated nutritional recommendations\n- Dietary pattern analysis\n- Health benefit summaries\n- Nutritional warnings when applicable\n\n### 3. Data Processing\n\n**Real-time Analysis**:\n- Average processing time: 5-15 seconds\n- Streaming response handling\n- Progress indicators for user feedback\n\n**Batch Processing Support**:\n- Multiple image analysis capability\n- Meal composition breakdown\n- Aggregate nutritional summaries\n\n## Integration Points\n\n### 1. Frontend Integration\n\n**Home Page** (`client/src/pages/home.tsx`):\n```typescript\nconst analysisMutation = useMutation({\n  mutationFn: async (imageData: string) => {\n    // Convert to FormData and submit to AI endpoint\n  },\n  onSuccess: (result) => {\n    // Display nutrition results\n    // Update analytics\n    // Refresh data cache\n  }\n});\n```\n\n**State Management**:\n- Loading states during AI processing\n- Error handling for failed analyses\n- Result caching and persistence\n\n### 2. Analytics Integration\n\n**AI Event Tracking**:\n- `food_analysis_start`: User initiates analysis\n- `food_analysis_complete`: Successful AI processing\n- `food_analysis_failed`: Error handling metrics\n- Confidence score tracking for quality monitoring\n\n### 3. Data Persistence\n\n**Storage Schema** (`shared/schema.ts`):\n```typescript\n// Database table with AI analysis results\nconst foodAnalyses = pgTable(\"food_analyses\", {\n  id: serial(\"id\").primaryKey(),\n  foodName: text(\"food_name\").notNull(),\n  calories: integer(\"calories\").notNull(),\n  confidence: real(\"confidence\").notNull(),\n  // ... additional nutritional fields\n  healthInsights: text(\"health_insights\"), // JSON string\n  vitamins: text(\"vitamins\"),              // JSON string\n  minerals: text(\"minerals\"),              // JSON string\n});\n```\n\n## AI Performance & Optimization\n\n### 1. Response Time Optimization\n\n**Image Compression**:\n- Client-side preprocessing reduces payload\n- Maintains image quality for accurate analysis\n- Optimizes API call efficiency\n\n**Caching Strategy**:\n- Result caching prevents duplicate analyses\n- Local storage for offline access\n- Smart cache invalidation\n\n### 2. Cost Management\n\n**Efficient API Usage**:\n- Image compression reduces token usage\n- Structured prompts minimize response length\n- Confidence filtering prevents unnecessary reprocessing\n\n**Rate Limiting**:\n- Client-side throttling prevents spam\n- Server-side protection against abuse\n- User feedback for processing limits\n\n### 3. Quality Assurance\n\n**Accuracy Monitoring**:\n- Confidence score tracking\n- User feedback collection\n- Error rate monitoring\n- Performance analytics\n\n**Continuous Improvement**:\n- Prompt optimization based on results\n- Model performance tracking\n- User satisfaction metrics\n\n## Security & Privacy\n\n### 1. Data Protection\n\n**Image Security**:\n- Images processed in memory only\n- No permanent storage of raw images\n- Base64 encoding for secure transmission\n- HTTPS encryption for all API calls\n\n**API Key Management**:\n- Environment variable protection\n- Server-side API key handling\n- No client-side exposure of credentials\n\n### 2. User Privacy\n\n**Data Minimization**:\n- Only nutritional data is stored\n- No personal identification in AI requests\n- Optional data retention policies\n- User-controlled data deletion\n\n## Future AI Enhancements\n\n### 1. Planned Features\n\n**Enhanced Recognition**:\n- Multi-food plate analysis\n- Ingredient-level breakdown\n- Cooking method detection\n- Freshness assessment\n\n**Personalization**:\n- Dietary preference learning\n- Personal nutrition goal integration\n- Allergen detection and warnings\n- Cultural cuisine specialization\n\n### 2. Technical Improvements\n\n**Model Upgrades**:\n- Integration with newer OpenAI models\n- Fine-tuning for food-specific accuracy\n- Custom nutrition database integration\n- Offline AI processing capabilities\n\n**Performance Enhancements**:\n- Faster response times\n- Improved image quality handling\n- Better error recovery\n- Enhanced batch processing\n\n## Troubleshooting & Maintenance\n\n### 1. Common Issues\n\n**API Failures**:\n- Check OpenAI API key validity\n- Verify network connectivity\n- Monitor rate limit status\n- Review image format compatibility\n\n**Accuracy Problems**:\n- Ensure good image lighting\n- Check food visibility in frame\n- Verify confidence scores\n- Consider image quality factors\n\n### 2. Monitoring & Logging\n\n**Performance Metrics**:\n- Response time tracking\n- Success/failure rates\n- User satisfaction scores\n- API usage analytics\n\n**Error Logging**:\n- Detailed error messages\n- Stack trace collection\n- User action context\n- Recovery attempt tracking\n\n## API Configuration\n\n### Environment Variables\n\n```bash\n# Required for AI functionality\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Optional for enhanced analytics\nVITE_GA_MEASUREMENT_ID=your_google_analytics_id\n```\n\n### OpenAI API Settings\n\n**Model Configuration**:\n- Model: `gpt-4o`\n- Max Tokens: 1500\n- Temperature: Default (controlled by OpenAI)\n- Response Format: JSON Object\n\n**Request Limits**:\n- Image Size: 10MB maximum\n- Processing Timeout: 30 seconds\n- Rate Limits: Based on OpenAI tier\n\nThis comprehensive AI integration enables YumTrack to provide accurate, reliable, and user-friendly nutritional analysis powered by state-of-the-art artificial intelligence technology.","size_bytes":9694},"ENV_SETUP.md":{"content":"# Environment Variables Setup\n\nYumTrack uses dotenv for environment variable management, providing a clean and organized way to handle configuration.\n\n## How It Works\n\n1. **Automatic Loading**: Environment variables are loaded automatically via `dotenv.config()` in `server/index.ts`\n2. **Centralized Config**: All configuration is managed through `server/config.ts`\n3. **Validation**: The app validates required and optional environment variables on startup\n\n## Configuration Files\n\n### `.env` File\nContains local environment variables that are loaded by dotenv:\n- EmailJS configuration for contact support\n- Comments showing which variables should be set via Replit Secrets\n\n### `server/config.ts`\nCentralized configuration management with:\n- Type-safe access to environment variables\n- Validation for required vs optional variables\n- Clear organization of all configuration options\n\n## Environment Variables\n\n### Required (via Replit Secrets)\n- `OPENAI_API_KEY`: OpenAI API key for food analysis\n- `VITE_GA_MEASUREMENT_ID`: Google Analytics measurement ID\n\n### Optional\n- `SENDGRID_API_KEY`: SendGrid API for server-side email\n- `VITE_EMAILJS_*`: EmailJS configuration for contact support\n\n### Client-Side Variables (VITE_ prefix)\nVariables prefixed with `VITE_` are exposed to the client-side code:\n- Can be set in `.env` file or Replit Secrets\n- Automatically available in the browser via `import.meta.env`\n\n## Startup Validation\n\nThe server validates configuration on startup and shows:\n- **Warnings**: for missing required variables\n- **Info**: for missing optional variables\n\nThis helps ensure the app is properly configured before starting.\n\n## Best Practices\n\n1. **Sensitive Keys**: Use Replit Secrets for API keys and sensitive data\n2. **Local Config**: Use `.env` file for development configuration\n3. **Documentation**: Keep `.env` file documented with comments\n4. **Validation**: Check the startup logs to ensure all required variables are set","size_bytes":1957},"INSTALLATION_GUIDE.md":{"content":"# YumTrack PWA Installation Guide\n\n## What is YumTrack?\n\nYumTrack is a Progressive Web App (PWA) that uses AI to analyze food photos and provide detailed nutritional information. It works like a native mobile app but installs directly through your web browser.\n\n## Installation Instructions\n\n### For iPhone and iPad (iOS)\n\n1. **Open Safari** on your iPhone or iPad\n2. **Navigate** to the NutriSnap web app\n3. **Look for the install banner** at the top of the screen that says \"Install YumTrack\"\n4. **Tap \"Install\"** in the banner, or follow these manual steps:\n   - Tap the **Share button** (□↗) in Safari's toolbar\n   - Scroll down in the share menu\n   - Tap **\"Add to Home Screen\"**\n   - Tap **\"Add\"** to confirm the installation\n\n### For Android Devices\n\n1. **Open Chrome** (or your preferred browser) on your Android device\n2. **Navigate** to the NutriSnap web app\n3. **Look for the install banner** at the top that says \"Install NutriSnap\"\n4. **Tap \"Install\"** in the banner, or follow these manual steps:\n   - Tap the **menu button** (⋮) in Chrome\n   - Select **\"Add to Home screen\"**\n   - Tap **\"Add\"** to confirm the installation\n\n### For Desktop (Windows, Mac, Linux)\n\n1. **Open your browser** (Chrome, Edge, or Firefox)\n2. **Navigate** to the NutriSnap web app\n3. **Look for the install icon** (⊕) in your browser's address bar\n4. **Click the install button** to add NutriSnap as a desktop app\n5. Alternative: Check your browser's menu for an **\"Install app\"** option\n\n## After Installation\n\nOnce installed, you'll have:\n\n- ✅ **App icon** on your home screen or desktop\n- ✅ **Full-screen experience** without browser interface\n- ✅ **Automatic updates** when new features are released\n\n## Features Overview\n\n### Core Functions\n- **Camera Integration**: Take photos directly within the app\n- **AI Food Analysis**: Get instant nutritional breakdowns\n- **History Tracking**: Review past food analyses\n- **Statistics Dashboard**: Track your nutrition over time\n\n### Mobile-Optimized Design\n- **Touch-friendly interface** designed for mobile devices\n- **Bottom navigation** for easy thumb access\n- **Responsive layout** that adapts to all screen sizes\n- **Fast performance** with optimized loading\n\n## Troubleshooting\n\n### Install Banner Doesn't Appear\n- Ensure you're using a compatible browser (Safari on iOS, Chrome on Android)\n- Try refreshing the page\n- Check that you haven't previously dismissed the install prompt\n- Use the manual installation steps above\n\n### App Won't Install\n- Clear your browser cache and try again\n- Ensure you have sufficient storage space\n- Update your browser to the latest version\n- Try using a different browser\n\n### App Isn't Working Properly\n- Check your internet connection for AI analysis features\n- Ensure camera permissions are granted\n- Try closing and reopening the app\n- Clear the app data in your device settings if needed\n\n## Getting Help\n\n### In-App Support\n- Visit the **Settings page** within the app\n- Use **\"Get Install Instructions\"** for platform-specific guidance\n- Check the **Help section** for common questions\n\n### Additional Features\n- **Dark Mode**: Switch themes in Settings\n\n## Privacy & Security\n\n- Your food photos are processed securely through OpenAI\n- Analysis history is stored locally on your device\n- No personal data is shared with third parties\n- You can clear all data anytime in Settings\n\n## System Requirements\n\n### Mobile Devices\n- **iOS**: Safari 14+ (iOS 14+)\n- **Android**: Chrome 80+ (Android 8+)\n\n### Desktop\n- **Chrome**: Version 80+\n- **Edge**: Version 80+\n- **Firefox**: Version 75+\n- **Safari**: Version 14+\n\n---\n\n**Need more help?** The app includes built-in install instructions that are customized for your specific device and browser. Look for the install guidance in the Settings menu within the app.","size_bytes":3808},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# YumTrack - AI Food Nutrition Analyzer\n\n## Overview\n\nYumTrack is a Progressive Web Application (PWA) that uses AI-powered computer vision to analyze food images and provide detailed nutritional information. Users can take photos of their meals and receive instant calorie counts, macronutrient breakdowns, and health insights powered by OpenAI's GPT-4V model.\n\n## System Architecture\n\nThe application follows a modern full-stack architecture with clear separation of concerns:\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui styling\n- **Styling**: Tailwind CSS with custom design system\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Build Tool**: Vite for fast development and optimized production builds\n- **PWA Features**: Service worker, manifest, and offline capabilities\n\n### Backend\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **File Upload**: Multer for multipart form handling\n- **Database**: Drizzle ORM with PostgreSQL (Neon Database)\n- **AI Integration**: OpenAI GPT-4V for food image analysis\n\n### Mobile-First Design\n- Responsive design optimized for mobile devices\n- PWA capabilities for app-like experience\n- Camera integration for photo capture\n- Bottom navigation for thumb-friendly interaction\n\n## Key Components\n\n### Food Analysis Engine\n- **Image Processing**: Multer handles image uploads with size/type validation\n- **AI Analysis**: OpenAI GPT-4V model analyzes food images and returns structured nutritional data\n- **Data Schema**: Comprehensive nutrition schema including macronutrients, vitamins, minerals, and health insights\n- **Storage**: Persistent storage of analysis results with timestamps\n\n### User Interface\n- **Camera Capture**: Native camera integration with fallback to file upload\n- **Image Compression**: Client-side image optimization before upload\n- **Real-time Analysis**: Loading states and progress indicators during AI processing\n- **Nutrition Display**: Comprehensive nutrition cards with macronutrient breakdowns\n- **History Tracking**: Persistent history of analyzed foods with search/filter capabilities\n- **Statistics Dashboard**: Weekly stats, trends, and insights\n\n### PWA Features\n- **Offline Support**: Service worker caching for core functionality\n- **Install Prompts**: Smart install banner with user dismissal handling\n- **Mobile Optimized**: Touch-friendly interface with mobile-first design\n- **Performance**: Optimized loading and caching strategies\n\n## Data Flow\n\n1. **Image Capture**: User captures or uploads food image through camera interface\n2. **Image Processing**: Client-side compression and base64 encoding\n3. **Upload**: Secure multipart upload to Express server with validation\n4. **AI Analysis**: OpenAI GPT-4V processes image and returns structured nutrition data\n5. **Data Storage**: Analysis results stored in PostgreSQL with Drizzle ORM\n6. **Response**: Formatted nutrition data returned to client\n7. **Display**: Rich nutrition cards with actionable insights\n8. **History**: Analysis saved to user's history for future reference\n\n## External Dependencies\n\n### AI & Machine Learning\n- **OpenAI GPT-4V**: Advanced vision model for food recognition and nutrition analysis\n- **Image Processing**: Client-side compression and optimization\n\n### Database & Storage\n- **Neon Database**: Serverless PostgreSQL for production scalability\n- **Drizzle ORM**: Type-safe database operations with schema validation\n- **Local Storage**: Browser storage for user preferences and offline data\n\n### UI & Design System\n- **Radix UI**: Accessible, unstyled component primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide Icons**: Consistent iconography throughout the application\n- **shadcn/ui**: Pre-built component library with Radix + Tailwind\n\n### Development & Build\n- **Vite**: Fast development server and optimized production builds\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundling for server-side code\n\n### Analytics & Tracking\n- **Google Analytics 4**: User behavior tracking, session analytics, and engagement metrics\n- **Event Tracking**: Custom event tracking for food analysis, navigation, and PWA installation\n- **Page View Tracking**: Single-page application route tracking\n\n## Deployment Strategy\n\n### Development\n- **Dev Server**: Vite development server with HMR\n- **Database**: Local PostgreSQL or Neon development database\n- **Environment**: Environment variables for API keys and database connections\n\n### Production\n- **Build Process**: Vite builds client assets, ESBuild bundles server code\n- **Server**: Express.js server serving both API and static files\n- **Database**: Production Neon PostgreSQL instance\n- **PWA**: Service worker registration and manifest serving\n- **Security**: Input validation, file type restrictions, and rate limiting\n\n### Environment Configuration\n- **dotenv Integration**: Automatic environment variable loading via dotenv\n- **Configuration Management**: Centralized config with validation in `server/config.ts`\n- **OpenAI API key**: Required for food analysis functionality\n- **Google Analytics**: Measurement ID for user tracking\n- **EmailJS**: Service configuration for contact support\n- **SendGrid**: Optional API key for server-side email functionality\n\n## Changelog\n\n```\nChangelog:\n- July 17, 2025. Updated calorie measurement display from \"kcal\" to \"Kcal\" (capital K) throughout the app for consistent capitalization\n- July 16, 2025. Changed calorie measurement display from \"calories\" to \"kcal\" throughout the app for better international standards\n- July 16, 2025. Removed PWA install features (banner and settings section) on desktop devices, keeping them mobile-only\n- July 14, 2025. Updated Google Analytics key and implemented comprehensive session duration tracking with user engagement metrics\n- July 06, 2025. Added Google Analytics integration for user tracking and session analytics\n- July 04, 2025. Renamed app from NutriSnap to YumTrack\n- July 03, 2025. Initial setup\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```","size_bytes":6282},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"client/env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_GA_MEASUREMENT_ID: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}","size_bytes":166},"server/config.ts":{"content":"// Environment configuration with dotenv\n// All environment variables are automatically loaded via dotenv.config() in server/index.ts\n\nexport const config = {\n  // Server configuration\n  port: process.env.PORT || 5000,\n  nodeEnv: process.env.NODE_ENV || 'development',\n  \n  // OpenAI API (required for food analysis)\n  openaiApiKey: process.env.OPENAI_API_KEY,\n  \n  // Google Analytics (client-side, prefixed with VITE_)\n  gaTrackingId: process.env.VITE_GA_MEASUREMENT_ID,\n  \n  // EmailJS configuration (client-side, prefixed with VITE_)\n  emailjs: {\n    serviceId: process.env.VITE_EMAILJS_SERVICE_ID,\n    templateId: process.env.VITE_EMAILJS_TEMPLATE_ID,\n    publicKey: process.env.VITE_EMAILJS_PUBLIC_KEY,\n  },\n  \n  // SendGrid API (optional, for server-side email)\n  sendgridApiKey: process.env.SENDGRID_API_KEY,\n} as const;\n\n// Validation helper to check required environment variables\nexport function validateConfig() {\n  const required = {\n    OPENAI_API_KEY: config.openaiApiKey,\n  };\n  \n  const missing = Object.entries(required)\n    .filter(([_, value]) => !value)\n    .map(([key]) => key);\n  \n  if (missing.length > 0) {\n    console.warn(`Warning: Missing required environment variables: ${missing.join(', ')}`);\n  }\n  \n  const optional = {\n    VITE_GA_MEASUREMENT_ID: config.gaTrackingId,\n    VITE_EMAILJS_SERVICE_ID: config.emailjs.serviceId,\n    SENDGRID_API_KEY: config.sendgridApiKey,\n  };\n  \n  const missingOptional = Object.entries(optional)\n    .filter(([_, value]) => !value)\n    .map(([key]) => key);\n  \n  if (missingOptional.length > 0) {\n    console.info(`Info: Optional environment variables not set: ${missingOptional.join(', ')}`);\n  }\n}","size_bytes":1663},"server/index.ts":{"content":"import dotenv from 'dotenv';\n// Load environment variables first\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { config, validateConfig } from \"./config\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Validate environment configuration\n  validateConfig();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2118},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { analyzeFoodImage } from \"./services/openai\";\nimport { insertFoodAnalysisSchema } from \"@shared/schema\";\nimport multer from \"multer\";\n\n// Configure multer for handling file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Analyze food image\n  app.post(\"/api/analyze-food\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      // Convert image to base64\n      const base64Image = req.file.buffer.toString('base64');\n      \n      // Analyze with OpenAI\n      const analysis = await analyzeFoodImage(base64Image);\n      \n      // Save to storage\n      const savedAnalysis = await storage.createFoodAnalysis({\n        foodName: analysis.foodName,\n        imageUrl: `data:${req.file.mimetype};base64,${base64Image}`,\n        calories: analysis.calories,\n        servingSize: analysis.servingSize,\n        confidence: analysis.confidence,\n        protein: analysis.macronutrients.protein,\n        carbohydrates: analysis.macronutrients.carbohydrates,\n        fat: analysis.macronutrients.fat,\n        fiber: analysis.macronutrients.fiber || null,\n        sugar: analysis.macronutrients.sugar || null,\n        sodium: analysis.macronutrients.sodium || null,\n        vitamins: JSON.stringify(analysis.vitamins),\n        minerals: JSON.stringify(analysis.minerals),\n        healthInsights: JSON.stringify(analysis.healthInsights),\n      });\n\n      res.json(savedAnalysis);\n    } catch (error) {\n      console.error(\"Error analyzing food:\", error);\n      res.status(500).json({ \n        error: \"Failed to analyze food image\", \n        details: (error as Error).message \n      });\n    }\n  });\n\n  // Get all food analyses\n  app.get(\"/api/food-analyses\", async (req, res) => {\n    try {\n      const analyses = await storage.getAllFoodAnalyses();\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Error fetching food analyses:\", error);\n      res.status(500).json({ error: \"Failed to fetch food analyses\" });\n    }\n  });\n\n  // Get recent food analyses\n  app.get(\"/api/food-analyses/recent\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 5;\n      const analyses = await storage.getRecentFoodAnalyses(limit);\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Error fetching recent food analyses:\", error);\n      res.status(500).json({ error: \"Failed to fetch recent food analyses\" });\n    }\n  });\n\n  // Get specific food analysis\n  app.get(\"/api/food-analyses/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const analysis = await storage.getFoodAnalysis(id);\n      \n      if (!analysis) {\n        return res.status(404).json({ error: \"Food analysis not found\" });\n      }\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error fetching food analysis:\", error);\n      res.status(500).json({ error: \"Failed to fetch food analysis\" });\n    }\n  });\n\n  // Delete food analysis\n  app.delete(\"/api/food-analyses/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteFoodAnalysis(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Food analysis not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting food analysis:\", error);\n      res.status(500).json({ error: \"Failed to delete food analysis\" });\n    }\n  });\n\n  // Clear all food analyses\n  app.delete(\"/api/food-analyses\", async (req, res) => {\n    try {\n      await storage.clearAllAnalyses();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error clearing all food analyses:\", error);\n      res.status(500).json({ error: \"Failed to clear all food analyses\" });\n    }\n  });\n\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4404},"server/storage.ts":{"content":"import { foodAnalyses, type FoodAnalysis, type InsertFoodAnalysis } from \"@shared/schema\";\n\nexport interface IStorage {\n  // Food analysis methods\n  createFoodAnalysis(analysis: InsertFoodAnalysis): Promise<FoodAnalysis>;\n  getFoodAnalysis(id: number): Promise<FoodAnalysis | undefined>;\n  getAllFoodAnalyses(): Promise<FoodAnalysis[]>;\n  getRecentFoodAnalyses(limit: number): Promise<FoodAnalysis[]>;\n  deleteFoodAnalysis(id: number): Promise<boolean>;\n  clearAllAnalyses(): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private foodAnalyses: Map<number, FoodAnalysis>;\n  private currentAnalysisId: number;\n\n  constructor() {\n    this.foodAnalyses = new Map();\n    this.currentAnalysisId = 1;\n  }\n\n  async createFoodAnalysis(insertAnalysis: InsertFoodAnalysis): Promise<FoodAnalysis> {\n    const id = this.currentAnalysisId++;\n    const analysis: FoodAnalysis = {\n      id,\n      foodName: insertAnalysis.foodName,\n      imageUrl: insertAnalysis.imageUrl,\n      calories: insertAnalysis.calories,\n      servingSize: insertAnalysis.servingSize,\n      confidence: insertAnalysis.confidence,\n      protein: insertAnalysis.protein,\n      carbohydrates: insertAnalysis.carbohydrates,\n      fat: insertAnalysis.fat,\n      fiber: insertAnalysis.fiber ?? null,\n      sugar: insertAnalysis.sugar ?? null,\n      sodium: insertAnalysis.sodium ?? null,\n      vitamins: insertAnalysis.vitamins ?? null,\n      minerals: insertAnalysis.minerals ?? null,\n      healthInsights: insertAnalysis.healthInsights ?? null,\n      createdAt: new Date(),\n    };\n    this.foodAnalyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getFoodAnalysis(id: number): Promise<FoodAnalysis | undefined> {\n    return this.foodAnalyses.get(id);\n  }\n\n  async getAllFoodAnalyses(): Promise<FoodAnalysis[]> {\n    return Array.from(this.foodAnalyses.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getRecentFoodAnalyses(limit: number): Promise<FoodAnalysis[]> {\n    const all = await this.getAllFoodAnalyses();\n    return all.slice(0, limit);\n  }\n\n  async deleteFoodAnalysis(id: number): Promise<boolean> {\n    return this.foodAnalyses.delete(id);\n  }\n\n  async clearAllAnalyses(): Promise<boolean> {\n    this.foodAnalyses.clear();\n    this.currentAnalysisId = 1;\n    return true;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2367},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const foodAnalyses = pgTable(\"food_analyses\", {\n  id: serial(\"id\").primaryKey(),\n  foodName: text(\"food_name\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  calories: integer(\"calories\").notNull(),\n  servingSize: text(\"serving_size\").notNull(),\n  confidence: real(\"confidence\").notNull(),\n  protein: real(\"protein\").notNull(),\n  carbohydrates: real(\"carbohydrates\").notNull(),\n  fat: real(\"fat\").notNull(),\n  fiber: real(\"fiber\"),\n  sugar: real(\"sugar\"),\n  sodium: real(\"sodium\"),\n  vitamins: text(\"vitamins\"), // JSON string\n  minerals: text(\"minerals\"), // JSON string\n  healthInsights: text(\"health_insights\"), // JSON string\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertFoodAnalysisSchema = createInsertSchema(foodAnalyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertFoodAnalysis = z.infer<typeof insertFoodAnalysisSchema>;\nexport type FoodAnalysis = typeof foodAnalyses.$inferSelect;\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":1504},"client/public/sw.js":{"content":"const CACHE_NAME = 'yumtrack-v1';\nconst urlsToCache = [\n  '/',\n  '/manifest.json',\n  'https://cdn.tailwindcss.com/3.4.0'\n];\n\n// Install event\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(function(cache) {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","size_bytes":950},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport History from \"@/pages/history\";\nimport Stats from \"@/pages/stats\";\nimport Settings from \"@/pages/settings\";\nimport Download from \"@/pages/download\";\nimport NotFound from \"@/pages/not-found\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport PWAInstallBanner from \"@/components/pwa-install-banner\";\nimport WebViewHelper from \"@/components/webview-helper\";\nimport { useRef, useEffect } from \"react\";\nimport { initGA, trackEvent } from \"./lib/analytics\";\nimport { useAnalytics } from \"./hooks/use-analytics\";\nimport { usePWA } from \"./hooks/use-pwa\";\n\nfunction Router() {\n  const homeRef = useRef<{ goToHome: () => void }>(null);\n  const [location, setLocation] = useLocation();\n  const { isInWebView } = usePWA();\n  \n  // Track page views when routes change\n  useAnalytics();\n\n  const handleHomeClick = () => {\n    // If on home page, reset to upload view instead of reloading\n    if (location === \"/\" && homeRef.current) {\n      homeRef.current.goToHome();\n    } else {\n      // If on other pages, navigate to home normally\n      setLocation(\"/\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-16\">\n      <PWAInstallBanner />\n      {/* WebViewHelper removed - PWAInstallBanner now handles webview users directly */}\n      <Switch>\n        <Route path=\"/\">\n          <Home ref={homeRef} />\n        </Route>\n        <Route path=\"/history\" component={History} />\n        <Route path=\"/stats\" component={Stats} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/download\" component={Download} />\n        <Route component={NotFound} />\n      </Switch>\n      <BottomNavigation onHomeClick={handleHomeClick} />\n    </div>\n  );\n}\n\nfunction App() {\n  // Initialize Google Analytics when app loads\n  useEffect(() => {\n    // Verify required environment variable is present\n    if (!import.meta.env.VITE_GA_MEASUREMENT_ID) {\n      console.warn('Missing required Google Analytics key: VITE_GA_MEASUREMENT_ID');\n    } else {\n      initGA();\n      \n      // Track initial app load after a short delay to ensure GA is ready\n      setTimeout(() => {\n        trackEvent('app_load', 'engagement', 'initial_visit');\n      }, 1000);\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2720},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(248, 50%, 98%);\n  --foreground: hsl(30, 18%, 13%);\n  --muted: hsl(248, 24%, 95%);\n  --muted-foreground: hsl(30, 8%, 45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(30, 18%, 13%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(30, 18%, 13%);\n  --border: hsl(30, 12%, 90%);\n  --input: hsl(30, 12%, 90%);\n  --primary: hsl(248, 84%, 61%);\n  --primary-foreground: hsl(248, 100%, 99%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(158, 100%, 99%);\n  --accent: hsl(38, 95%, 48%);\n  --accent-foreground: hsl(38, 100%, 99%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(30, 18%, 13%);\n  --radius: 0.75rem;\n  \n  /* Custom colors for YumTrack */\n  --yumtrack-neutral-50: hsl(248, 50%, 98%);\n  --yumtrack-neutral-100: hsl(248, 24%, 95%);\n  --yumtrack-neutral-600: hsl(215, 16%, 47%);\n  --yumtrack-neutral-800: hsl(222, 47%, 11%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --popover: hsl(240, 10%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --primary: hsl(248, 84%, 61%);\n  --primary-foreground: hsl(248, 100%, 99%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(158, 100%, 99%);\n  --accent: hsl(240, 4%, 16%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 5%, 84%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n/* Custom utility classes */\n.bg-gradient-primary {\n  background: linear-gradient(135deg, var(--primary), hsl(258, 84%, 71%));\n}\n\n.bg-gradient-secondary {\n  background: linear-gradient(135deg, var(--secondary), hsl(168, 64%, 62%));\n}\n\n.bg-gradient-accent {\n  background: linear-gradient(135deg, var(--accent), hsl(28, 95%, 58%));\n}\n\n.aspect-square {\n  aspect-ratio: 1 / 1;\n}\n\n/* PWA specific styles */\n@media (display-mode: standalone) {\n  body {\n    padding-top: env(safe-area-inset-top);\n  }\n}\n\n/* Touch friendly buttons */\n@media (pointer: coarse) {\n  button {\n    min-height: 44px;\n  }\n}\n","size_bytes":2465},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Capture install prompt early, before React components mount\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  e.preventDefault();\n  (window as any).deferredPrompt = e;\n  console.log('Install prompt captured globally');\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":392},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { config } from \"../config\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: config.openaiApiKey\n});\n\nexport interface NutritionAnalysis {\n  foodName: string;\n  confidence: number;\n  calories: number;\n  servingSize: string;\n  macronutrients: {\n    protein: number;\n    carbohydrates: number;\n    fat: number;\n    fiber?: number;\n    sugar?: number;\n    sodium?: number;\n  };\n  vitamins: Array<{\n    name: string;\n    amount: string;\n    dailyValue: string;\n  }>;\n  minerals: Array<{\n    name: string;\n    amount: string;\n    dailyValue: string;\n  }>;\n  healthInsights: string[];\n}\n\nexport async function analyzeFoodImage(base64Image: string): Promise<NutritionAnalysis> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a professional nutritionist and food recognition expert. Analyze the food image and provide detailed nutrition information. \n          \n          Respond with JSON in this exact format:\n          {\n            \"foodName\": \"string\",\n            \"confidence\": number (0-1),\n            \"calories\": number,\n            \"servingSize\": \"string (e.g., '1 serving (150g)')\",\n            \"macronutrients\": {\n              \"protein\": number,\n              \"carbohydrates\": number,\n              \"fat\": number,\n              \"fiber\": number,\n              \"sugar\": number,\n              \"sodium\": number\n            },\n            \"vitamins\": [\n              {\n                \"name\": \"string\",\n                \"amount\": \"string\",\n                \"dailyValue\": \"string\"\n              }\n            ],\n            \"minerals\": [\n              {\n                \"name\": \"string\", \n                \"amount\": \"string\",\n                \"dailyValue\": \"string\"\n              }\n            ],\n            \"healthInsights\": [\"string\"]\n          }\n          \n          Be accurate with nutritional values. If you cannot identify the food clearly, set confidence below 0.7.`\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"Analyze this food image and provide detailed nutrition information including calories, macronutrients, vitamins, minerals, and health insights.\"\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`\n              }\n            }\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1500,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Validate the response has required fields\n    if (!result.foodName || !result.calories || !result.macronutrients) {\n      throw new Error(\"Invalid response from OpenAI - missing required nutrition data\");\n    }\n\n    return result;\n  } catch (error) {\n    console.error(\"Error analyzing food image:\", error);\n    throw new Error(\"Failed to analyze food image: \" + (error as Error).message);\n  }\n}\n","size_bytes":3209},"client/src/components/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, Clock, BarChart3, Settings } from \"lucide-react\";\nimport { trackEvent } from \"@/lib/analytics\";\n\nconst navItems = [\n  { path: \"/\", icon: Home, label: \"Home\" },\n  { path: \"/history\", icon: Clock, label: \"History\" },\n  { path: \"/stats\", icon: BarChart3, label: \"Stats\" },\n  { path: \"/settings\", icon: Settings, label: \"Settings\" },\n];\n\ninterface BottomNavigationProps {\n  onHomeClick?: () => void;\n}\n\nexport default function BottomNavigation({ onHomeClick }: BottomNavigationProps) {\n  const [location, setLocation] = useLocation();\n\n  const handleNavClick = (path: string) => {\n    // Track navigation events\n    const pageName = path === \"/\" ? \"home\" : path.slice(1);\n    trackEvent('navigation', 'engagement', pageName);\n    \n    if (path === \"/\" && onHomeClick) {\n      // Custom home navigation handler\n      onHomeClick();\n    } else {\n      setLocation(path);\n    }\n  };\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-background border-t border-border z-30 safe-area-bottom\">\n      <div className=\"max-w-sm mx-auto px-4\">\n        <div className=\"flex items-center justify-around py-2\">\n          {navItems.map(({ path, icon: Icon, label }) => {\n            const isActive = location === path;\n            return (\n              <Button\n                key={path}\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleNavClick(path)}\n                className={`flex flex-col items-center space-y-1 py-2 px-4 h-auto ${\n                  isActive \n                    ? 'text-primary' \n                    : 'text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                <Icon className=\"w-6 h-6\" />\n                <span className=\"text-xs font-medium\">{label}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1967},"client/src/components/camera-capture.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { X, Camera, RotateCcw, Check } from \"lucide-react\";\nimport { compressImage } from \"@/lib/image-utils\";\n\ninterface CameraCaptureProps {\n  onImageCaptured: (imageData: string) => void;\n  onCancel?: () => void;\n  trigger?: React.ReactNode;\n}\n\nexport default function CameraCapture({\n  onImageCaptured,\n  onCancel,\n  trigger,\n}: CameraCaptureProps) {\n  const [isOpen, setIsOpen] = useState(!trigger);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const startCamera = useCallback(async () => {\n    try {\n      setError(null);\n      console.log('Starting camera...');\n      \n      // Use very simple constraints first\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: { ideal: 640 },\n          height: { ideal: 480 }\n        }\n      });\n      \n      console.log('MediaStream obtained:', mediaStream.active, mediaStream.getVideoTracks().length);\n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        const video = videoRef.current;\n        console.log('Setting video source...');\n        \n        // Create a completely new video element approach\n        video.srcObject = mediaStream;\n        video.muted = true;\n        video.playsInline = true;\n        video.autoplay = true;\n        \n        // Use a promise to handle video loading properly\n        const playVideo = () => {\n          return new Promise<void>((resolve, reject) => {\n            video.onloadedmetadata = async () => {\n              console.log('Metadata loaded:', video.videoWidth, 'x', video.videoHeight);\n              try {\n                await video.play();\n                console.log('Video playing');\n                resolve();\n              } catch (playErr) {\n                console.error('Play failed:', playErr);\n                reject(playErr);\n              }\n            };\n            \n            video.onerror = (err) => {\n              console.error('Video error:', err);\n              reject(err);\n            };\n          });\n        };\n        \n        await playVideo();\n      }\n    } catch (err) {\n      console.error(\"Error accessing camera:\", err);\n      setError(\"Unable to access camera. Please check permissions or use gallery instead.\");\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  // Start camera automatically when component mounts in camera mode (no trigger)\n  useEffect(() => {\n    if (!trigger && isOpen && !capturedImage && !stream) {\n      console.log(\"Starting camera from useEffect\");\n      startCamera();\n    }\n  }, [isOpen, capturedImage, stream, trigger, startCamera]);\n\n  // Also try to start camera when dialog first opens\n  useEffect(() => {\n    if (isOpen && !stream && !capturedImage) {\n      console.log(\"Dialog opened, attempting to start camera\");\n      setTimeout(() => {\n        startCamera();\n      }, 100);\n    }\n  }, [isOpen, stream, capturedImage, startCamera]);\n\n  const capturePhoto = useCallback(async () => {\n    console.log(\"Attempting to capture photo...\");\n\n    if (!videoRef.current || !canvasRef.current) {\n      console.error(\"Video or canvas ref not available\");\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      console.error(\"Canvas context not available\");\n      return;\n    }\n\n    // Wait for video to be ready\n    if (\n      video.videoWidth === 0 ||\n      video.videoHeight === 0 ||\n      video.readyState < 2\n    ) {\n      console.log(\"Video not ready, waiting...\");\n      // Wait up to 3 seconds for video to be ready\n      for (let i = 0; i < 30; i++) {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        if (\n          video.videoWidth > 0 &&\n          video.videoHeight > 0 &&\n          video.readyState >= 2\n        ) {\n          break;\n        }\n      }\n    }\n\n    console.log(\"Video state before capture:\", {\n      videoWidth: video.videoWidth,\n      videoHeight: video.videoHeight,\n      readyState: video.readyState,\n      paused: video.paused,\n      currentTime: video.currentTime,\n    });\n\n    // Use video dimensions or fallback\n    const width = video.videoWidth || 640;\n    const height = video.videoHeight || 480;\n\n    // Set canvas dimensions\n    canvas.width = width;\n    canvas.height = height;\n\n    // Try ImageCapture API first (more reliable)\n    try {\n      if ('ImageCapture' in window && stream && stream.getVideoTracks().length > 0) {\n        const track = stream.getVideoTracks()[0];\n        const imageCapture = new (window as any).ImageCapture(track);\n        const bitmap = await imageCapture.grabFrame();\n        \n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        context.drawImage(bitmap, 0, 0);\n        console.log('Used ImageCapture API:', bitmap.width, 'x', bitmap.height);\n      } else {\n        throw new Error('ImageCapture not available');\n      }\n    } catch (imageCaptureError) {\n      console.log('ImageCapture failed, using video element');\n      // Clear canvas and draw video frame\n      context.clearRect(0, 0, width, height);\n      context.drawImage(video, 0, 0, width, height);\n    }\n\n    // Convert to blob and compress\n    const imageData = canvas.toDataURL(\"image/jpeg\", 0.8);\n    console.log(\"Image captured, data length:\", imageData.length);\n\n    const compressedImage = await compressImage(imageData, 1024, 0.8);\n    console.log(\"Image compressed, final length:\", compressedImage.length);\n\n    setCapturedImage(compressedImage);\n    stopCamera();\n  }, [stopCamera]);\n\n  const handleFileSelect = useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files?.[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = async (e) => {\n        const imageData = e.target?.result as string;\n        const compressedImage = await compressImage(imageData, 1024, 0.8);\n        setCapturedImage(compressedImage);\n      };\n      reader.readAsDataURL(file);\n    },\n    [],\n  );\n\n  const handleConfirm = useCallback(() => {\n    if (capturedImage) {\n      onImageCaptured(capturedImage);\n      setIsOpen(false);\n      setCapturedImage(null);\n    }\n  }, [capturedImage, onImageCaptured]);\n\n  const handleCancel = useCallback(() => {\n    stopCamera();\n    setCapturedImage(null);\n    setIsOpen(false);\n    onCancel?.();\n  }, [stopCamera, onCancel]);\n\n  const handleRetake = useCallback(() => {\n    setCapturedImage(null);\n    startCamera();\n  }, [startCamera]);\n\n  const CameraCaptureContent = () => (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center p-4 bg-black/50 text-white\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleCancel}\n          className=\"text-white hover:bg-white/10\"\n        >\n          <X className=\"w-6 h-6\" />\n        </Button>\n\n        {!capturedImage && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => fileInputRef.current?.click()}\n            className=\"text-white hover:bg-white/10\"\n          >\n            Gallery\n          </Button>\n        )}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 relative\">\n        {error ? (\n          <div className=\"flex items-center justify-center h-full p-4\">\n            <Card className=\"max-w-sm mx-auto\">\n              <CardContent className=\"p-6 text-center space-y-4\">\n                <div className=\"w-16 h-16 bg-destructive/10 rounded-full mx-auto flex items-center justify-center\">\n                  <X className=\"w-8 h-8 text-destructive\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\">\n                    Camera Access Error\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{error}</p>\n                </div>\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"w-full\"\n                >\n                  Choose from Gallery Instead\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        ) : capturedImage ? (\n          <div className=\"h-full flex items-center justify-center bg-black\">\n            <img\n              src={capturedImage}\n              alt=\"Captured food\"\n              className=\"max-w-full max-h-full object-contain\"\n            />\n          </div>\n        ) : (\n          <div className=\"relative w-full h-full bg-black\">\n            {stream ? (\n              <>\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  muted\n                  width=\"100%\"\n                  height=\"100%\"\n                  style={{\n                    objectFit: \"cover\",\n                    backgroundColor: \"black\"\n                  }}\n                />\n                \n                {/* Fallback canvas for preview if video doesn't work */}\n                <canvas\n                  ref={canvasRef}\n                  className=\"absolute inset-0 w-full h-full object-cover\"\n                  style={{\n                    display: videoRef.current?.videoWidth === 0 ? 'block' : 'none',\n                    backgroundColor: \"black\"\n                  }}\n                />\n\n                {/* Camera overlay */}\n                <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                  <div className=\"w-64 h-64 border-2 border-white rounded-2xl opacity-50\"></div>\n                </div>\n\n                {/* Debug overlay */}\n                <div className=\"absolute top-4 left-4 bg-black/50 text-white p-2 rounded text-xs\">\n                  Stream:{\" \"}\n                  {stream\n                    ? `${stream.getVideoTracks().length} video track(s)`\n                    : \"Inactive\"}\n                  <br />\n                  Video:{\" \"}\n                  {videoRef.current\n                    ? `${videoRef.current.videoWidth}x${videoRef.current.videoHeight}`\n                    : \"N/A\"}\n                  <br />\n                  Ready:{\" \"}\n                  {videoRef.current ? videoRef.current.readyState : \"N/A\"}\n                  <br />\n                  Playing: {videoRef.current ? !videoRef.current.paused : \"N/A\"}\n                  <br />\n                  Error: {error || \"None\"}\n                </div>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-white text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-2 border-white border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p>Starting camera...</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-6 bg-black/50\">\n        {capturedImage ? (\n          <div className=\"flex justify-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleRetake}\n              className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\"\n            >\n              <RotateCcw className=\"w-5 h-5 mr-2\" />\n              Retake\n            </Button>\n            <Button\n              size=\"lg\"\n              onClick={handleConfirm}\n              className=\"bg-primary text-primary-foreground\"\n            >\n              <Check className=\"w-5 h-5 mr-2\" />\n              Use Photo\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={capturePhoto}\n              className=\"w-16 h-16 rounded-full bg-white text-black hover:bg-white/90\"\n            >\n              <Camera className=\"w-8 h-8\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <canvas ref={canvasRef} className=\"hidden\" />\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      />\n    </div>\n  );\n\n  if (trigger) {\n    return (\n      <>\n        <div onClick={() => fileInputRef.current?.click()}>{trigger}</div>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n      </>\n    );\n  }\n\n  return <CameraCaptureContent />;\n}\n","size_bytes":13180},"client/src/components/canvas-camera.tsx":{"content":"import React, { useRef, useCallback, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Camera, RotateCcw, Check, X } from 'lucide-react';\nimport { compressImage } from '@/lib/image-utils';\n\ninterface CanvasCameraProps {\n  onImageCaptured: (imageData: string) => void;\n  onCancel?: () => void;\n}\n\nexport default function CanvasCamera({ onImageCaptured, onCancel }: CanvasCameraProps) {\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n  \n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const hiddenVideoRef = useRef<HTMLVideoElement>(null);\n  const animationFrameRef = useRef<number>();\n\n  const startCamera = useCallback(async () => {\n    try {\n      setError(null);\n      setIsInitializing(true);\n      \n      console.log('Starting canvas camera...');\n      \n      // Get media stream with back camera, fallback to any camera\n      let mediaStream;\n      try {\n        mediaStream = await navigator.mediaDevices.getUserMedia({\n          video: { \n            facingMode: 'environment', // Use back camera\n            width: 640, \n            height: 480 \n          }\n        });\n      } catch (backCameraError) {\n        console.log('Back camera not available, using default camera');\n        mediaStream = await navigator.mediaDevices.getUserMedia({\n          video: { \n            width: 640, \n            height: 480 \n          }\n        });\n      }\n      \n      console.log('MediaStream obtained for canvas camera');\n      setStream(mediaStream);\n      \n      // Set up hidden video element to receive the stream\n      if (hiddenVideoRef.current) {\n        const video = hiddenVideoRef.current;\n        video.srcObject = mediaStream;\n        video.muted = true;\n        video.playsInline = true;\n        \n        video.onloadedmetadata = async () => {\n          try {\n            await video.play();\n            console.log('Hidden video playing for canvas');\n            \n            // Start canvas rendering loop with optimized frame rate\n            let lastRenderTime = 0;\n            const targetFPS = 15; // Reduced from 60fps to 15fps for better performance\n            const frameInterval = 1000 / targetFPS;\n            \n            const renderLoop = (currentTime: number) => {\n              if (!canvasRef.current || !video) return;\n              \n              // Throttle rendering to target FPS\n              if (currentTime - lastRenderTime < frameInterval) {\n                if (stream && stream.active) {\n                  animationFrameRef.current = requestAnimationFrame(renderLoop);\n                }\n                return;\n              }\n              \n              lastRenderTime = currentTime;\n              \n              const canvas = canvasRef.current;\n              const context = canvas.getContext('2d');\n              if (!context) return;\n              \n              // Set canvas size if not set\n              if (canvas.width !== 640 || canvas.height !== 480) {\n                canvas.width = 640;\n                canvas.height = 480;\n              }\n              \n              // Draw video frame to canvas\n              if (video.videoWidth > 0 && video.videoHeight > 0) {\n                context.drawImage(video, 0, 0, 640, 480);\n                \n                if (isInitializing) {\n                  setIsInitializing(false);\n                  console.log('Canvas camera ready');\n                }\n              }\n              \n              // Continue loop\n              if (stream && stream.active) {\n                animationFrameRef.current = requestAnimationFrame(renderLoop);\n              }\n            };\n            \n            animationFrameRef.current = requestAnimationFrame(renderLoop);\n          } catch (playError) {\n            console.error('Failed to play hidden video:', playError);\n            setError('Camera initialization failed');\n          }\n        };\n      }\n    } catch (err) {\n      console.error('Error starting canvas camera:', err);\n      setError('Unable to access camera. Please check permissions.');\n      setIsInitializing(false);\n    }\n  }, [stream, isInitializing]);\n\n  const stopCamera = useCallback(() => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(async () => {\n    if (!canvasRef.current) {\n      console.error('Canvas not available for capture');\n      return;\n    }\n\n    console.log('Capturing photo from canvas...');\n    \n    const canvas = canvasRef.current;\n    const imageData = canvas.toDataURL('image/jpeg', 0.8);\n    \n    console.log('Canvas capture complete, data length:', imageData.length);\n    \n    const compressedImage = await compressImage(imageData, 1024, 0.8);\n    setCapturedImage(compressedImage);\n    stopCamera();\n  }, [stopCamera]);\n\n  const handleConfirm = useCallback(() => {\n    if (capturedImage) {\n      onImageCaptured(capturedImage);\n      setCapturedImage(null);\n    }\n  }, [capturedImage, onImageCaptured]);\n\n  const handleRetake = useCallback(() => {\n    setCapturedImage(null);\n    startCamera();\n  }, [startCamera]);\n\n  const handleCancel = useCallback(() => {\n    stopCamera();\n    setCapturedImage(null);\n    onCancel?.();\n  }, [stopCamera, onCancel]);\n\n  // Start camera on mount\n  useEffect(() => {\n    startCamera();\n    return () => stopCamera();\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 bg-black/50\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleCancel}\n          className=\"text-white hover:bg-white/10\"\n        >\n          <X className=\"w-5 h-5 mr-2\" />\n          Cancel\n        </Button>\n        <h2 className=\"text-white font-semibold\">Camera</h2>\n        <div className=\"w-20\" /> {/* Spacer */}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 relative\">\n        {error ? (\n          <div className=\"flex items-center justify-center h-full p-4\">\n            <div className=\"text-center text-white\">\n              <X className=\"w-16 h-16 mx-auto mb-4 text-red-500\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Camera Error</h3>\n              <p className=\"text-sm opacity-75 mb-4\">{error}</p>\n              <Button onClick={handleCancel} variant=\"outline\">\n                Go Back\n              </Button>\n            </div>\n          </div>\n        ) : capturedImage ? (\n          <div className=\"h-full flex items-center justify-center bg-black\">\n            <img\n              src={capturedImage}\n              alt=\"Captured food\"\n              className=\"max-w-full max-h-full object-contain\"\n            />\n          </div>\n        ) : (\n          <div className=\"relative w-full h-full bg-black\">\n            {/* Canvas for live preview */}\n            <canvas\n              ref={canvasRef}\n              className=\"w-full h-full object-cover\"\n              style={{ backgroundColor: 'black' }}\n            />\n            \n            {/* Hidden video element for stream */}\n            <video\n              ref={hiddenVideoRef}\n              autoPlay\n              playsInline\n              muted\n              style={{ display: 'none' }}\n            />\n            \n            {/* Loading overlay */}\n            {isInitializing && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n                <div className=\"text-white text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-2 border-white border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p>Starting camera...</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Camera overlay */}\n            <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n              <div className=\"w-64 h-64 border-2 border-white rounded-2xl opacity-50\"></div>\n            </div>\n            \n            {/* Debug info */}\n            <div className=\"absolute top-4 left-4 bg-black/50 text-white p-2 rounded text-xs\">\n              Stream: {stream ? 'Active' : 'Inactive'}\n              <br />\n              Canvas: {canvasRef.current ? `${canvasRef.current.width}x${canvasRef.current.height}` : 'N/A'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-6 bg-black/50\">\n        {capturedImage ? (\n          <div className=\"flex justify-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleRetake}\n              className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\"\n            >\n              <RotateCcw className=\"w-5 h-5 mr-2\" />\n              Retake\n            </Button>\n            <Button\n              size=\"lg\"\n              onClick={handleConfirm}\n              className=\"bg-primary text-primary-foreground\"\n            >\n              <Check className=\"w-5 h-5 mr-2\" />\n              Use Photo\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={capturePhoto}\n              disabled={isInitializing}\n              className=\"w-16 h-16 rounded-full bg-white text-black hover:bg-white/90 disabled:opacity-50\"\n            >\n              <Camera className=\"w-8 h-8\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9854},"client/src/components/nutrition-results.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Save, Share2, Camera } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { FoodAnalysis } from \"@shared/schema\";\n\ninterface NutritionResultsProps {\n  analysis: FoodAnalysis;\n  onNewAnalysis: () => void;\n  showBackButton?: boolean;\n  onBack?: () => void;\n}\n\nexport default function NutritionResults({ \n  analysis, \n  onNewAnalysis, \n  showBackButton = false, \n  onBack \n}: NutritionResultsProps) {\n  const { toast } = useToast();\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Parse JSON fields\n  const vitamins = analysis.vitamins ? JSON.parse(analysis.vitamins) : [];\n  const minerals = analysis.minerals ? JSON.parse(analysis.minerals) : [];\n  const healthInsights = analysis.healthInsights ? JSON.parse(analysis.healthInsights) : [];\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      // Save to local storage as backup\n      const savedAnalyses = JSON.parse(localStorage.getItem('nutrisnap-saved') || '[]');\n      savedAnalyses.push(analysis);\n      localStorage.setItem('nutrisnap-saved', JSON.stringify(savedAnalyses));\n      \n      toast({\n        title: \"Analysis saved\",\n        description: \"Your nutrition analysis has been saved successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Save failed\",\n        description: \"Unable to save analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: `${analysis.foodName} - Nutrition Analysis`,\n      text: `${analysis.foodName}: ${analysis.calories} calories, ${analysis.protein}g protein, ${analysis.carbohydrates}g carbs, ${analysis.fat}g fat`,\n      url: window.location.href,\n    };\n\n    try {\n      if (navigator.share && navigator.canShare?.(shareData)) {\n        await navigator.share(shareData);\n      } else {\n        // Fallback: copy to clipboard\n        await navigator.clipboard.writeText(shareData.text);\n        toast({\n          title: \"Copied to clipboard\",\n          description: \"Nutrition data has been copied to your clipboard.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Share failed\",\n        description: \"Unable to share analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      {showBackButton && (\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold text-foreground\">Analysis Result</h1>\n        </div>\n      )}\n\n      {/* Food Identification */}\n      <Card className=\"overflow-hidden\">\n        <div className=\"aspect-square bg-muted\">\n          <img \n            src={analysis.imageUrl} \n            alt={analysis.foodName}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n        <CardContent className=\"p-6 space-y-4\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground\">{analysis.foodName}</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {Math.round(analysis.confidence * 100)}% confidence match\n            </p>\n          </div>\n          \n          {/* Calorie Summary */}\n          <div className=\"bg-gradient-primary rounded-xl p-6 text-white text-center\">\n            <div className=\"text-4xl font-bold\">{analysis.calories}</div>\n            <div className=\"text-lg font-medium\">Total Kcal</div>\n            <div className=\"text-sm opacity-90 mt-1\">{analysis.servingSize}</div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Nutrition Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Nutrition Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Macronutrients */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                <span className=\"font-medium text-foreground\">Protein</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"font-semibold text-foreground\">{analysis.protein}g</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {Math.round((analysis.protein / 50) * 100)}% DV\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-secondary rounded-full\"></div>\n                <span className=\"font-medium text-foreground\">Carbohydrates</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"font-semibold text-foreground\">{analysis.carbohydrates}g</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {Math.round((analysis.carbohydrates / 300) * 100)}% DV\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                <span className=\"font-medium text-foreground\">Fat</span>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"font-semibold text-foreground\">{analysis.fat}g</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {Math.round((analysis.fat / 65) * 100)}% DV\n                </div>\n              </div>\n            </div>\n\n            {analysis.fiber && (\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  <span className=\"font-medium text-foreground\">Fiber</span>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold text-foreground\">{analysis.fiber}g</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {Math.round((analysis.fiber / 25) * 100)}% DV\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Vitamins & Minerals */}\n          {(vitamins.length > 0 || minerals.length > 0) && (\n            <div className=\"border-t border-border pt-4\">\n              <h4 className=\"font-medium text-foreground mb-3\">Key Vitamins & Minerals</h4>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {[...vitamins.slice(0, 2), ...minerals.slice(0, 2)].map((nutrient, index) => (\n                  <div key={index} className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"font-semibold text-foreground\">{nutrient.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{nutrient.amount}</div>\n                    <div className=\"text-xs text-muted-foreground\">{nutrient.dailyValue}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Health Insights */}\n      {healthInsights.length > 0 && (\n        <Card className=\"bg-gradient-secondary text-white\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Health Insights</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            {healthInsights.map((insight, index) => (\n              <p key={index}>• {insight}</p>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-3\">\n        <Button \n          onClick={handleSave}\n          disabled={isSaving}\n          className=\"flex-1 bg-secondary text-secondary-foreground shadow-lg hover:bg-secondary/90\"\n        >\n          <Save className=\"w-5 h-5 mr-2\" />\n          {isSaving ? 'Saving...' : 'Save'}\n        </Button>\n        <Button \n          onClick={handleShare}\n          variant=\"outline\"\n          className=\"flex-1 border-2 hover:border-primary hover:text-primary\"\n        >\n          <Share2 className=\"w-5 h-5 mr-2\" />\n          Share\n        </Button>\n      </div>\n\n      {/* New Analysis Button */}\n      <Button \n        onClick={onNewAnalysis}\n        className=\"w-full bg-primary text-primary-foreground py-4 h-auto text-lg font-semibold shadow-lg hover:bg-primary/90\"\n      >\n        <Camera className=\"w-6 h-6 mr-3\" />\n        Analyze Another Food\n      </Button>\n    </main>\n  );\n}\n","size_bytes":9151},"client/src/components/pwa-install-banner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { Download, CheckCircle } from \"lucide-react\";\nimport { usePWA } from \"@/hooks/use-pwa\";\nimport { trackEvent } from \"@/lib/analytics\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport default function PWAInstallBanner() {\n  const [isVisible, setIsVisible] = useState(false);\n  const { canInstall, install, isInstalled, isInWebView } = usePWA();\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    // Show banner if app can be installed and user hasn't dismissed it\n    const dismissed = localStorage.getItem('yumtrack-install-dismissed');\n    const installedDismissed = localStorage.getItem('yumtrack-installed-dismissed');\n    \n    // Show banner if app is not installed and not dismissed, OR if app is installed but user hasn't dismissed the installed message\n    if ((!isInstalled && !dismissed) || (isInstalled && !installedDismissed)) {\n      const timer = setTimeout(() => setIsVisible(true), 1000);\n      return () => clearTimeout(timer);\n    } else {\n      setIsVisible(false);\n    }\n  }, [canInstall, isInstalled]);\n\n  // Auto-dismiss the \"App Installed\" message after 5 seconds\n  useEffect(() => {\n    if (isVisible && isInstalled) {\n      const autoDismissTimer = setTimeout(() => {\n        localStorage.setItem('yumtrack-installed-dismissed', 'true');\n        setIsVisible(false);\n      }, 5000);\n      return () => clearTimeout(autoDismissTimer);\n    }\n  }, [isVisible, isInstalled]);\n\n  const handleInstall = async () => {\n    trackEvent('pwa_install_attempt', 'engagement', 'banner_click');\n    \n    // First check if app is already installed\n    if (isInstalled) {\n      trackEvent('pwa_already_installed', 'engagement', 'banner_click');\n      // Mark as dismissed since they clicked on it while it was already installed\n      localStorage.setItem('yumtrack-installed-dismissed', 'true');\n      setIsVisible(false);\n      return;\n    }\n    \n    // If in webview (messenger/kakaotalk), open in browser directly\n    if (isInWebView) {\n      const currentUrl = window.location.href;\n      const userAgent = navigator.userAgent.toLowerCase();\n      \n      trackEvent('webview_browser_redirect', 'engagement', 'install_redirect');\n      \n      // Try multiple methods to open in browser\n      let opened = false;\n      \n      if (userAgent.includes('kakaotalk')) {\n        // KakaoTalk specific methods\n        try {\n          // Method 1: KakaoTalk external browser\n          window.location.href = `kakaotalk://web/openExternal?url=${encodeURIComponent(currentUrl)}`;\n          opened = true;\n        } catch (e) {\n          console.log('KakaoTalk method 1 failed, trying fallback');\n        }\n      } else if (userAgent.includes('messenger') || userAgent.includes('fban') || userAgent.includes('fbav')) {\n        // Facebook Messenger methods\n        try {\n          // Method 1: Android intent\n          if (userAgent.includes('android')) {\n            window.location.href = `intent://${window.location.host}${window.location.pathname}#Intent;scheme=https;package=com.android.chrome;S.browser_fallback_url=${encodeURIComponent(currentUrl)};end`;\n            opened = true;\n          }\n        } catch (e) {\n          console.log('Messenger method 1 failed, trying fallback');\n        }\n      }\n      \n      // Universal fallback methods\n      if (!opened) {\n        try {\n          // Method 2: Try to open in new window/tab\n          const newWindow = window.open(currentUrl, '_blank');\n          if (newWindow) {\n            opened = true;\n          }\n        } catch (e) {\n          console.log('Window.open failed, trying location change');\n        }\n      }\n      \n      // Last resort: direct location change\n      if (!opened) {\n        window.location.href = currentUrl;\n      }\n      \n      return;\n    }\n    \n    // For regular browsers, attempt PWA installation\n    if (canInstall && install) {\n      try {\n        const installed = await install();\n        if (installed) {\n          trackEvent('pwa_install_success', 'engagement', 'automatic_install');\n          setIsVisible(false);\n          localStorage.setItem('yumtrack-install-dismissed', 'true');\n          return;\n        }\n      } catch (error) {\n        console.error('Installation failed:', error);\n        trackEvent('pwa_install_failed', 'engagement', 'automatic_install');\n      }\n    } else {\n      // If PWA install isn't available, hide the banner\n      setIsVisible(false);\n      trackEvent('pwa_install_unavailable', 'engagement', 'banner_attempt');\n    }\n  };\n\n\n\n  const handleDismiss = () => {\n    if (isInstalled) {\n      trackEvent('pwa_installed_dismiss', 'engagement', 'banner_dismiss');\n      localStorage.setItem('yumtrack-installed-dismissed', 'true');\n    } else {\n      trackEvent('pwa_install_dismiss', 'engagement', 'banner_dismiss');\n      localStorage.setItem('yumtrack-install-dismissed', 'true');\n    }\n    setIsVisible(false);\n  };\n\n  if (!isVisible || !isMobile) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className={`fixed top-0 left-0 right-0 p-4 z-50 shadow-lg animate-in slide-in-from-top ${\n        isInstalled ? 'bg-green-600 text-white' : 'bg-primary text-primary-foreground'\n      }`}>\n        <div className=\"flex items-center justify-between max-w-sm mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            {isInstalled ? (\n              <CheckCircle className=\"w-6 h-6\" />\n            ) : (\n              <Download className=\"w-6 h-6\" />\n            )}\n            <div>\n              <div className=\"text-sm font-medium\">\n                {isInstalled ? 'App Installed' : 'Get the App'}\n              </div>\n              {isInstalled && (\n                <div className=\"text-xs text-white/80 mt-0.5\">\n                  Now added to your homescreen\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            {isInstalled ? (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={handleDismiss}\n                className=\"text-xs px-3 py-1 h-auto text-white/80 hover:text-white hover:bg-white/10\"\n              >\n                Dismiss\n              </Button>\n            ) : (\n              <>\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  onClick={handleInstall}\n                  className=\"text-xs px-4 py-2 h-auto font-semibold\"\n                >\n                  Download\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleDismiss}\n                  className=\"text-xs px-3 py-1 h-auto text-primary-foreground/80 hover:text-primary-foreground hover:bg-primary-foreground/10\"\n                >\n                  Later\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":7001},"client/src/components/simple-camera.tsx":{"content":"import React, { useRef, useCallback, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Camera, RotateCcw, Check, X } from 'lucide-react';\nimport { compressImage } from '@/lib/image-utils';\n\ninterface SimpleCameraProps {\n  onImageCaptured: (imageData: string) => void;\n  onCancel?: () => void;\n}\n\nexport default function SimpleCamera({ onImageCaptured, onCancel }: SimpleCameraProps) {\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const startCamera = useCallback(async () => {\n    try {\n      setError(null);\n      console.log('Starting simple camera...');\n      \n      // Use very basic getUserMedia - most reliable approach\n      let mediaStream;\n      try {\n        // Try back camera first\n        mediaStream = await navigator.mediaDevices.getUserMedia({\n          video: { facingMode: 'environment' }\n        });\n      } catch (backCameraError) {\n        // Fallback to any camera\n        mediaStream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n      }\n      \n      console.log('MediaStream obtained');\n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        const video = videoRef.current;\n        video.srcObject = mediaStream;\n        \n        // Simple approach - just set the stream and let the browser handle it\n        video.onloadedmetadata = () => {\n          video.play().catch(err => {\n            console.error('Play error:', err);\n            setError('Unable to start camera preview');\n          });\n        };\n      }\n    } catch (err) {\n      console.error('Error starting camera:', err);\n      setError('Unable to access camera. Please check permissions.');\n    }\n  }, []);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  const capturePhoto = useCallback(async () => {\n    if (!videoRef.current) {\n      console.error('Video not available');\n      return;\n    }\n\n    const video = videoRef.current;\n    \n    // Create a canvas to capture the frame\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    \n    if (!context) {\n      console.error('Canvas context not available');\n      return;\n    }\n\n    // Get video dimensions\n    const videoWidth = video.videoWidth || 640;\n    const videoHeight = video.videoHeight || 480;\n    \n    // Calculate the crop area (the white box overlay is 256x256px centered)\n    const cropSize = Math.min(videoWidth, videoHeight) * 0.7; // 70% of the smaller dimension\n    const cropX = (videoWidth - cropSize) / 2;\n    const cropY = (videoHeight - cropSize) / 2;\n    \n    // Set canvas to crop size\n    canvas.width = cropSize;\n    canvas.height = cropSize;\n    \n    // Draw only the cropped area from the video\n    context.drawImage(\n      video, \n      cropX, cropY, cropSize, cropSize, // source area (crop region)\n      0, 0, cropSize, cropSize // destination area (full canvas)\n    );\n    \n    // Convert to image data\n    const imageData = canvas.toDataURL('image/jpeg', 0.8);\n    console.log('Cropped image captured:', imageData.length);\n    \n    const compressedImage = await compressImage(imageData, 1024, 0.8);\n    setCapturedImage(compressedImage);\n    stopCamera();\n  }, [stopCamera]);\n\n  const handleConfirm = useCallback(() => {\n    if (capturedImage) {\n      onImageCaptured(capturedImage);\n      setCapturedImage(null);\n    }\n  }, [capturedImage, onImageCaptured]);\n\n  const handleRetake = useCallback(() => {\n    setCapturedImage(null);\n    startCamera();\n  }, [startCamera]);\n\n  const handleCancel = useCallback(() => {\n    stopCamera();\n    setCapturedImage(null);\n    onCancel?.();\n  }, [stopCamera, onCancel]);\n\n  // Start camera on mount\n  useEffect(() => {\n    startCamera();\n    return () => stopCamera();\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 bg-black/50\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleCancel}\n          className=\"text-white hover:bg-white/10\"\n        >\n          <X className=\"w-5 h-5 mr-2\" />\n          Cancel\n        </Button>\n        <h2 className=\"text-white font-semibold\">Camera</h2>\n        <div className=\"w-20\" />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 relative\">\n        {error ? (\n          <div className=\"flex items-center justify-center h-full p-4\">\n            <div className=\"text-center text-white\">\n              <X className=\"w-16 h-16 mx-auto mb-4 text-red-500\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Camera Error</h3>\n              <p className=\"text-sm opacity-75 mb-4\">{error}</p>\n              <Button onClick={handleCancel} variant=\"outline\">\n                Go Back\n              </Button>\n            </div>\n          </div>\n        ) : capturedImage ? (\n          <div className=\"h-full flex items-center justify-center bg-black\">\n            <img\n              src={capturedImage}\n              alt=\"Captured food\"\n              className=\"max-w-full max-h-full object-contain\"\n            />\n          </div>\n        ) : (\n          <div className=\"relative w-full h-full bg-black\">\n            {/* Simple video element - let the browser handle everything */}\n            <video\n              ref={videoRef}\n              autoPlay\n              playsInline\n              muted\n              className=\"w-full h-full object-cover\"\n              style={{ \n                backgroundColor: 'black'\n              }}\n            />\n            \n            {/* Camera overlay - crop area indicator */}\n            <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n              <div className=\"relative\">\n                {/* Main crop area */}\n                <div className=\"w-64 h-64 border-2 border-white rounded-2xl opacity-75\"></div>\n                {/* Corner indicators */}\n                <div className=\"absolute top-0 left-0 w-6 h-6 border-t-4 border-l-4 border-white rounded-tl-2xl\"></div>\n                <div className=\"absolute top-0 right-0 w-6 h-6 border-t-4 border-r-4 border-white rounded-tr-2xl\"></div>\n                <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-4 border-l-4 border-white rounded-bl-2xl\"></div>\n                <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-4 border-r-4 border-white rounded-br-2xl\"></div>\n                {/* Center instruction */}\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"bg-black/50 text-white px-3 py-1 rounded-full text-sm\">\n                    Center food here\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Simple status indicator */}\n            <div className=\"absolute top-4 left-4 bg-black/50 text-white p-2 rounded text-xs\">\n              {stream ? 'Camera Active' : 'Starting...'}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-6 bg-black/50\">\n        {capturedImage ? (\n          <div className=\"flex justify-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              onClick={handleRetake}\n              className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\"\n            >\n              <RotateCcw className=\"w-5 h-5 mr-2\" />\n              Retake\n            </Button>\n            <Button\n              size=\"lg\"\n              onClick={handleConfirm}\n              className=\"bg-primary text-primary-foreground\"\n            >\n              <Check className=\"w-5 h-5 mr-2\" />\n              Use Photo\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={capturePhoto}\n              disabled={!stream}\n              className=\"w-16 h-16 rounded-full bg-white text-black hover:bg-white/90 disabled:opacity-50\"\n            >\n              <Camera className=\"w-8 h-8\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8484},"client/src/components/webview-helper.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertDialog, AlertDialogContent, AlertDialogDescription, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Copy, ExternalLink, Bookmark, Smartphone } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { trackEvent } from \"@/lib/analytics\";\n\ninterface WebViewHelperProps {\n  isInWebView: boolean;\n}\n\nexport default function WebViewHelper({ isInWebView }: WebViewHelperProps) {\n  const [showHelper, setShowHelper] = useState(false);\n  const { toast } = useToast();\n\n  if (!isInWebView) return null;\n\n  const copyUrl = async () => {\n    try {\n      await navigator.clipboard.writeText(window.location.href);\n      trackEvent('webview_url_copied', 'engagement', 'helper_action');\n      toast({\n        title: \"URL Copied\",\n        description: \"You can now paste this link in your browser to install the app\",\n      });\n    } catch (error) {\n      // Fallback for browsers that don't support clipboard API\n      const textArea = document.createElement('textarea');\n      textArea.value = window.location.href;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      \n      toast({\n        title: \"URL Ready\",\n        description: \"Link copied! Open your browser and paste it to install the app\",\n      });\n    }\n  };\n\n\n\n  const openInBrowser = () => {\n    trackEvent('webview_open_browser_attempt', 'engagement', 'helper_action');\n    \n    const userAgent = navigator.userAgent.toLowerCase();\n    const browserUrl = window.location.href;\n    \n    // Enhanced browser opening logic\n    if (userAgent.includes('kakaotalk')) {\n      // KakaoTalk: Multiple fallback options\n      try {\n        window.location.href = `kakaotalk://web/openExternal?url=${encodeURIComponent(browserUrl)}`;\n      } catch {\n        // Fallback to generic browser intent\n        window.location.href = `intent://${window.location.host}${window.location.pathname}#Intent;scheme=https;end`;\n      }\n    } else if (userAgent.includes('fban') || userAgent.includes('fbav')) {\n      // Facebook Messenger\n      window.location.href = `intent://${window.location.host}${window.location.pathname}#Intent;scheme=https;package=com.android.chrome;end`;\n    } else if (userAgent.includes('android')) {\n      // Generic Android webview\n      window.location.href = `intent://${window.location.host}${window.location.pathname}#Intent;scheme=https;package=com.android.chrome;S.browser_fallback_url=${encodeURIComponent(browserUrl)};end`;\n    } else {\n      // iOS or other - try to open in new window\n      const newWindow = window.open(browserUrl, '_blank');\n      if (!newWindow) {\n        // If popup blocked, show instructions\n        setShowHelper(true);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"fixed bottom-20 left-4 right-4 bg-orange-500 text-white p-3 rounded-lg shadow-lg z-40 animate-in slide-in-from-bottom\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Bookmark className=\"w-4 h-4\" />\n            <span>Add YumTrack to your phone</span>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => setShowHelper(true)}\n            className=\"text-xs px-3 py-1 h-auto\"\n          >\n            How?\n          </Button>\n        </div>\n      </div>\n\n      <AlertDialog open={showHelper} onOpenChange={setShowHelper}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Add YumTrack to Home Screen</AlertDialogTitle>\n            <AlertDialogDescription>\n              Choose the best option for your device:\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          \n          <div className=\"space-y-3 my-4\">\n            <Button\n              variant=\"default\"\n              className=\"w-full justify-start bg-primary hover:bg-primary/90\"\n              onClick={openInBrowser}\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Open in Browser (Best Option)\n            </Button>\n            \n\n            <Button\n              variant=\"outline\"\n              className=\"w-full justify-start\"\n              onClick={copyUrl}\n            >\n              <Copy className=\"w-4 h-4 mr-2\" />\n              Copy Link to Share\n            </Button>\n          </div>\n\n          <div className=\"text-xs text-muted-foreground space-y-2\">\n            <p><strong>Why use the browser?</strong></p>\n            <p>• Get the full YumTrack app experience</p>\n            <p>• Save photos offline and install as home screen app</p>\n            <p>• Works perfectly on all phones and tablets</p>\n            <p>• No downloads needed - it's a modern web app</p>\n          </div>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":5001},"client/src/hooks/use-analytics.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport { trackPageView } from '../lib/analytics';\n\nexport const useAnalytics = () => {\n  const [location] = useLocation();\n  const prevLocationRef = useRef<string>(location);\n  \n  useEffect(() => {\n    if (location !== prevLocationRef.current) {\n      trackPageView(location);\n      prevLocationRef.current = location;\n    }\n  }, [location]);\n};","size_bytes":426},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pwa.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\nexport function usePWA() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [canInstall, setCanInstall] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [isInWebView, setIsInWebView] = useState(false);\n\n  useEffect(() => {\n    // Check if app is already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isInWebApp = (window.navigator as any).standalone === true;\n    const installed = isStandalone || isInWebApp;\n    \n    // Debug logging\n    console.log('PWA Detection:', {\n      isStandalone,\n      isInWebApp,\n      installed,\n      userAgent: navigator.userAgent\n    });\n    \n    setIsInstalled(installed);\n\n    // Detect if running in webview (messenger apps, KakaoTalk, etc.)\n    const detectWebView = () => {\n      const userAgent = navigator.userAgent.toLowerCase();\n      const isWebView = (\n        // KakaoTalk webview\n        userAgent.includes('kakaotalk') ||\n        // Facebook Messenger\n        userAgent.includes('fban') || userAgent.includes('fbav') ||\n        // Instagram\n        userAgent.includes('instagram') ||\n        // Line browser\n        userAgent.includes('line') ||\n        // WeChat\n        userAgent.includes('micromessenger') ||\n        // Generic webview indicators\n        userAgent.includes('wv') ||\n        // Android WebView\n        (userAgent.includes('android') && userAgent.includes('version') && !userAgent.includes('chrome')) ||\n        // iOS WebView (not Safari)\n        (userAgent.includes('iphone') || userAgent.includes('ipad')) && !userAgent.includes('safari')\n      );\n      \n      return isWebView;\n    };\n\n    setIsInWebView(detectWebView());\n\n    // Check if there's already a global prompt stored\n    if ((window as any).deferredPrompt) {\n      setDeferredPrompt((window as any).deferredPrompt);\n      setCanInstall(true);\n    }\n\n    // Listen for the beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      const event = e as BeforeInstallPromptEvent;\n      setDeferredPrompt(event);\n      setCanInstall(true);\n      // Store globally as backup\n      (window as any).deferredPrompt = event;\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setCanInstall(false);\n      setDeferredPrompt(null);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const install = async (): Promise<boolean> => {\n    if (!deferredPrompt) return false;\n\n    try {\n      await deferredPrompt.prompt();\n      const choice = await deferredPrompt.userChoice;\n      \n      if (choice.outcome === 'accepted') {\n        setDeferredPrompt(null);\n        setCanInstall(false);\n        return true;\n      }\n    } catch (error) {\n      console.error('Error installing PWA:', error);\n    }\n    \n    return false;\n  };\n\n  return {\n    canInstall: canInstall && !isInstalled,\n    isInstalled,\n    isInWebView,\n    install,\n  };\n}\n","size_bytes":3572},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/analytics.ts":{"content":"// Define the gtag function globally\ndeclare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\n// Session tracking variables\nlet sessionStartTime: number = 0;\nlet lastActivityTime: number = 0;\nlet isSessionActive: boolean = false;\n\n// Initialize Google Analytics\nexport const initGA = () => {\n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n\n  if (!measurementId) {\n    console.warn('Missing required Google Analytics key: VITE_GA_MEASUREMENT_ID');\n    return;\n  }\n\n  console.log('Initializing Google Analytics with ID:', measurementId);\n\n  // Add Google Analytics script to the head\n  const script1 = document.createElement('script');\n  script1.async = true;\n  script1.src = `https://www.googletagmanager.com/gtag/js?id=${measurementId}`;\n  script1.onload = () => {\n    console.log('Google Analytics script loaded successfully');\n  };\n  script1.onerror = () => {\n    console.error('Failed to load Google Analytics script');\n  };\n  document.head.appendChild(script1);\n\n  // Initialize gtag\n  const script2 = document.createElement('script');\n  script2.innerHTML = `\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n    gtag('config', '${measurementId}', {\n      debug_mode: true,\n      send_page_view: false,\n      transport_type: 'beacon',\n      custom_map: {\n        'custom_parameter_1': 'app_name'\n      }\n    });\n    console.log('Google Analytics initialized with config:', '${measurementId}');\n    \n    // Send a test event to verify connection\n    gtag('event', 'ga_connection_test', {\n      event_category: 'debug',\n      event_label: 'initial_setup'\n    });\n    console.log('Test event sent to Google Analytics');\n  `;\n  document.head.appendChild(script2);\n\n  // Start session tracking\n  startSessionTracking();\n};\n\n// Track page views - useful for single-page applications\nexport const trackPageView = (url: string) => {\n  console.log('Tracking page view:', url);\n  \n  if (typeof window === 'undefined' || !window.gtag) {\n    console.warn('gtag not available for page view tracking');\n    return;\n  }\n  \n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n  if (!measurementId) {\n    console.warn('No measurement ID for page view tracking');\n    return;\n  }\n  \n  window.gtag('config', measurementId, {\n    page_path: url\n  });\n  \n  console.log('Page view tracked successfully:', url);\n};\n\n// Track events\nexport const trackEvent = (\n  action: string, \n  category?: string, \n  label?: string, \n  value?: number\n) => {\n  console.log('Tracking event:', { action, category, label, value });\n  \n  if (typeof window === 'undefined' || !window.gtag) {\n    console.warn('gtag not available for event tracking');\n    return;\n  }\n  \n  // Check if dataLayer exists to verify GA is properly loaded\n  if (window.dataLayer) {\n    console.log('DataLayer length before event:', window.dataLayer.length);\n  }\n  \n  window.gtag('event', action, {\n    event_category: category,\n    event_label: label,\n    value: value,\n    // Add custom parameter to help identify our events\n    custom_parameter_1: 'yumtrack_app'\n  });\n  \n  // Check dataLayer after sending event\n  if (window.dataLayer) {\n    console.log('DataLayer length after event:', window.dataLayer.length);\n    console.log('Latest dataLayer entry:', window.dataLayer[window.dataLayer.length - 1]);\n  }\n  \n  console.log('Event tracked successfully:', action);\n};\n\n// Session tracking functions\nexport const startSessionTracking = () => {\n  if (isSessionActive) return;\n  \n  sessionStartTime = Date.now();\n  lastActivityTime = Date.now();\n  isSessionActive = true;\n  \n  console.log('Session tracking started');\n  \n  // Track session start\n  trackEvent('session_start', 'engagement', 'session_tracking');\n  \n  // Set up activity tracking\n  const events = ['click', 'scroll', 'keypress', 'mousemove', 'touchstart'];\n  events.forEach(event => {\n    document.addEventListener(event, updateLastActivity, { passive: true });\n  });\n  \n  // Set up periodic session duration reporting\n  setInterval(reportSessionDuration, 30000); // Report every 30 seconds\n  \n  // Set up visibility change tracking\n  document.addEventListener('visibilitychange', handleVisibilityChange);\n  \n  // Set up beforeunload to track session end\n  window.addEventListener('beforeunload', endSession);\n};\n\nconst updateLastActivity = () => {\n  lastActivityTime = Date.now();\n};\n\nconst reportSessionDuration = () => {\n  if (!isSessionActive) return;\n  \n  const currentTime = Date.now();\n  const sessionDuration = Math.round((currentTime - sessionStartTime) / 1000); // in seconds\n  const timeSinceActivity = Math.round((currentTime - lastActivityTime) / 1000);\n  \n  // Only report if user was active recently (within 60 seconds)\n  if (timeSinceActivity < 60) {\n    trackEvent('session_duration', 'engagement', 'active_session', sessionDuration);\n    console.log(`Session duration: ${sessionDuration}s, last activity: ${timeSinceActivity}s ago`);\n  }\n};\n\nconst handleVisibilityChange = () => {\n  if (document.hidden) {\n    // Page became hidden - track session pause\n    const sessionDuration = Math.round((Date.now() - sessionStartTime) / 1000);\n    trackEvent('session_pause', 'engagement', 'page_hidden', sessionDuration);\n  } else {\n    // Page became visible - update activity\n    updateLastActivity();\n    trackEvent('session_resume', 'engagement', 'page_visible');\n  }\n};\n\nexport const endSession = () => {\n  if (!isSessionActive) return;\n  \n  const sessionDuration = Math.round((Date.now() - sessionStartTime) / 1000);\n  trackEvent('session_end', 'engagement', 'session_complete', sessionDuration);\n  \n  console.log(`Session ended. Total duration: ${sessionDuration}s`);\n  isSessionActive = false;\n};\n\n// Get current session info\nexport const getSessionInfo = () => {\n  if (!isSessionActive) return null;\n  \n  const currentTime = Date.now();\n  return {\n    duration: Math.round((currentTime - sessionStartTime) / 1000),\n    timeSinceActivity: Math.round((currentTime - lastActivityTime) / 1000),\n    isActive: isSessionActive\n  };\n};","size_bytes":6097},"client/src/lib/image-utils.ts":{"content":"export function compressImage(\n  imageData: string, \n  maxWidth: number = 1024, \n  quality: number = 0.8\n): Promise<string> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n\n    img.onload = () => {\n      // Calculate new dimensions\n      let { width, height } = img;\n      \n      if (width > height) {\n        if (width > maxWidth) {\n          height = (height * maxWidth) / width;\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxWidth) {\n          width = (width * maxWidth) / height;\n          height = maxWidth;\n        }\n      }\n\n      // Set canvas size\n      canvas.width = width;\n      canvas.height = height;\n\n      // Draw and compress\n      ctx?.drawImage(img, 0, 0, width, height);\n      const compressedData = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedData);\n    };\n\n    img.src = imageData;\n  });\n}\n\nexport function dataURLtoBlob(dataURL: string): Blob {\n  const arr = dataURL.split(',');\n  const mime = arr[0].match(/:(.*?);/)?.[1] || 'image/jpeg';\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  \n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  \n  return new Blob([u8arr], { type: mime });\n}\n\nexport function blobToDataURL(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n","size_bytes":1594},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/download.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Smartphone, Monitor, Zap, Wifi, Camera } from \"lucide-react\";\nimport { usePWA } from \"@/hooks/use-pwa\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DownloadPage() {\n  const { canInstall, install, isInstalled } = usePWA();\n  const { toast } = useToast();\n\n  const handleDirectDownload = async () => {\n    if (isInstalled) {\n      toast({\n        title: \"App already installed\",\n        description: \"YumTrack is already installed on your home screen.\",\n      });\n      return;\n    }\n\n    if (canInstall) {\n      try {\n        const installed = await install();\n        if (installed) {\n          toast({\n            title: \"App installed successfully\",\n            description: \"YumTrack has been added to your home screen.\",\n          });\n          return;\n        }\n      } catch (error) {\n        console.error('Installation failed:', error);\n        toast({\n          title: \"Installation failed\",\n          description: \"Please try again or install manually from your browser menu.\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      // Show platform-specific instructions as toast\n      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n      const isAndroid = /Android/.test(navigator.userAgent);\n      \n      if (isIOS) {\n        toast({\n          title: \"Install on iOS\",\n          description: \"Tap the Share button (□↗) in Safari, then 'Add to Home Screen', and tap 'Add' to confirm.\",\n        });\n      } else if (isAndroid) {\n        toast({\n          title: \"Install on Android\",\n          description: \"Tap the menu (⋮) in Chrome, then 'Add to Home screen', and tap 'Add' to confirm.\",\n        });\n      } else {\n        toast({\n          title: \"Install on Desktop\",\n          description: \"Look for the install button (⊕) in your browser's address bar or check the browser menu for 'Install app' option.\",\n        });\n      }\n    }\n  };\n\n\n\n  const features = [\n    { icon: Camera, title: \"AI Food Analysis\", description: \"Take photos and get instant nutrition facts\" },\n    { icon: Wifi, title: \"Works Offline\", description: \"Access your history even without internet\" },\n    { icon: Zap, title: \"Lightning Fast\", description: \"Optimized for mobile performance\" },\n  ];\n\n  if (isInstalled) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md text-center\">\n          <CardHeader>\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Download className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl text-green-700\">App Already Installed!</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-6\">\n              YumTrack is already installed on your device. Look for the app icon on your home screen.\n            </p>\n            <Button onClick={() => window.location.href = \"/\"} className=\"w-full\">\n              Open App\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <div className=\"max-w-4xl mx-auto py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"w-20 h-20 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg\">\n            <Download className=\"w-10 h-10 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Download YumTrack</h1>\n          <p className=\"text-xl text-gray-600 mb-6\">\n            AI-powered food nutrition analysis app\n          </p>\n          <div className=\"flex justify-center space-x-2 mb-8\">\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              <Smartphone className=\"w-4 h-4 mr-1\" />\n              Mobile Optimized\n            </Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              <Monitor className=\"w-4 h-4 mr-1\" />\n              Works on Desktop\n            </Badge>\n          </div>\n        </div>\n\n        {/* Download Button */}\n        <div className=\"text-center mb-16\">\n          <Button\n            onClick={handleDirectDownload}\n            size=\"lg\"\n            className=\"text-lg px-8 py-6 h-auto shadow-lg hover:shadow-xl transition-shadow\"\n          >\n            <Download className=\"w-6 h-6 mr-3\" />\n            {isInstalled ? \"App Already Installed\" : canInstall ? \"Install App Now\" : \"Get Installation Instructions\"}\n          </Button>\n          <p className=\"text-sm text-gray-500 mt-4\">\n            Free • Works offline • No app store required\n          </p>\n        </div>\n\n        {/* Features */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-16\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <feature.icon className=\"w-6 h-6 text-primary\" />\n                </div>\n                <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">{feature.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* How it works */}\n        <Card className=\"mb-12\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-2xl\">How It Works</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n              <div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 text-blue-600 font-bold text-lg\">\n                  1\n                </div>\n                <h3 className=\"font-semibold mb-2\">Take a Photo</h3>\n                <p className=\"text-muted-foreground text-sm\">Snap a picture of your food using your camera</p>\n              </div>\n              <div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 text-blue-600 font-bold text-lg\">\n                  2\n                </div>\n                <h3 className=\"font-semibold mb-2\">AI Analysis</h3>\n                <p className=\"text-muted-foreground text-sm\">Our AI identifies the food and calculates nutrition</p>\n              </div>\n              <div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 text-blue-600 font-bold text-lg\">\n                  3\n                </div>\n                <h3 className=\"font-semibold mb-2\">Get Results</h3>\n                <p className=\"text-muted-foreground text-sm\">View detailed nutrition facts and health insights</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Progressive Web App Info */}\n        <Card>\n          <CardContent className=\"text-center pt-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">What is a Progressive Web App?</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              YumTrack is a Progressive Web App (PWA) that combines the best of web and mobile apps. \n              It installs directly from your browser without needing an app store.\n            </p>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                <span>Works offline</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                <span>Auto-updates</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                <span>Small file size</span>\n              </div>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                <span>Cross-platform</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8835},"client/src/pages/history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Trash2, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport NutritionResults from \"@/components/nutrition-results\";\nimport type { FoodAnalysis } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function History() {\n  const [selectedAnalysis, setSelectedAnalysis] = useState<FoodAnalysis | null>(null);\n  const { toast } = useToast();\n\n  const { data: analyses = [], isLoading } = useQuery<FoodAnalysis[]>({\n    queryKey: ['/api/food-analyses'],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/food-analyses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/food-analyses'] });\n      toast({\n        title: \"Analysis deleted\",\n        description: \"The food analysis has been removed from your history.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (selectedAnalysis) {\n    return (\n      <NutritionResults\n        analysis={selectedAnalysis}\n        onNewAnalysis={() => setSelectedAnalysis(null)}\n        showBackButton\n        onBack={() => setSelectedAnalysis(null)}\n      />\n    );\n  }\n\n  return (\n    <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n      <header className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-foreground\">Analysis History</h1>\n        <p className=\"text-muted-foreground text-sm\">View and manage your food analyses</p>\n      </header>\n\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-muted rounded-xl\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/4\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : analyses.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center space-y-4\">\n            <div className=\"w-16 h-16 bg-muted rounded-full mx-auto flex items-center justify-center\">\n              <svg className=\"w-8 h-8 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n              </svg>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">No Analysis History</h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">Start analyzing food to see your history here</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {analyses.map((analysis) => (\n            <Card key={analysis.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <img \n                    src={analysis.imageUrl} \n                    alt={analysis.foodName}\n                    className=\"w-16 h-16 rounded-xl object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-foreground\">{analysis.foodName}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{analysis.calories} Kcal</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(analysis.createdAt), { addSuffix: true })}\n                    </p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => setSelectedAnalysis(analysis)}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(analysis.id)}\n                      disabled={deleteMutation.isPending}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":5142},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport { Camera, Image, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SimpleCamera from \"@/components/simple-camera\";\nimport NutritionResults from \"@/components/nutrition-results\";\nimport type { FoodAnalysis } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { dataURLtoBlob } from \"@/lib/image-utils\";\nimport { trackEvent } from \"@/lib/analytics\";\n\ntype ViewState = 'upload' | 'camera' | 'analyzing' | 'results';\n\ninterface HomeRef {\n  goToHome: () => void;\n}\n\nconst Home = forwardRef<HomeRef>((props, ref) => {\n  const [currentView, setCurrentView] = useState<ViewState>('upload');\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [analysisResult, setAnalysisResult] = useState<FoodAnalysis | null>(null);\n  const { toast } = useToast();\n\n  const { data: recentAnalyses = [] } = useQuery<FoodAnalysis[]>({\n    queryKey: ['/api/food-analyses/recent?limit=3'],\n  });\n\n  const analysisMutation = useMutation({\n    mutationFn: async (imageData: string) => {\n      const blob = dataURLtoBlob(imageData);\n      const formData = new FormData();\n      formData.append('image', blob, 'food-image.jpg');\n      \n      const response = await fetch('/api/analyze-food', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to analyze food');\n      }\n\n      return response.json() as Promise<FoodAnalysis>;\n    },\n    onSuccess: (result) => {\n      setAnalysisResult(result);\n      setCurrentView('results');\n      // Track successful food analysis\n      trackEvent('food_analysis_complete', 'engagement', 'success');\n      // Invalidate both queries to update home page data\n      queryClient.invalidateQueries({ queryKey: ['/api/food-analyses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/food-analyses/recent?limit=3'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis failed\",\n        description: error.message || \"Unable to analyze food. Please try again.\",\n        variant: \"destructive\",\n      });\n      setCurrentView('upload');\n    },\n  });\n\n  const handleImageSelected = (imageData: string) => {\n    setSelectedImage(imageData);\n    setCurrentView('upload');\n  };\n\n  const handleAnalysisComplete = (result: FoodAnalysis) => {\n    setAnalysisResult(result);\n    setCurrentView('results');\n  };\n\n  const handleNewAnalysis = () => {\n    setCurrentView('upload');\n    setSelectedImage(null);\n    setAnalysisResult(null);\n    // Refresh recent analyses when returning to home\n    queryClient.invalidateQueries({ queryKey: ['/api/food-analyses/recent?limit=3'] });\n  };\n\n  // Expose goToHome method through ref\n  useImperativeHandle(ref, () => ({\n    goToHome: () => {\n      setCurrentView('upload');\n      setSelectedImage(null);\n      setAnalysisResult(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/food-analyses/recent?limit=3'] });\n    }\n  }));\n\n  // Refetch recent analyses when returning to home view\n  useEffect(() => {\n    if (currentView === 'upload') {\n      queryClient.invalidateQueries({ queryKey: ['/api/food-analyses/recent?limit=3'] });\n    }\n  }, [currentView]);\n\n  if (currentView === 'camera') {\n    return (\n      <SimpleCamera\n        onImageCaptured={handleImageSelected}\n        onCancel={() => setCurrentView('upload')}\n      />\n    );\n  }\n\n  if (currentView === 'analyzing') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center px-4\">\n        <div className=\"text-center space-y-4 max-w-sm mx-auto\">\n          <div className=\"w-20 h-20 bg-gradient-accent rounded-2xl mx-auto flex items-center justify-center animate-pulse\">\n            <svg className=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"></path>\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Analyzing Your Food</h2>\n          <p className=\"text-muted-foreground text-sm\">Our AI is identifying ingredients and calculating nutrition...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentView === 'results' && analysisResult) {\n    return (\n      <NutritionResults\n        analysis={analysisResult}\n        onNewAnalysis={handleNewAnalysis}\n      />\n    );\n  }\n\n  return (\n    <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n      {/* Header with YumTrack Logo */}\n      <header className=\"text-center space-y-6\">\n        <div className=\"flex items-center justify-center gap-5\">\n          <svg width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n            {/* Magnifying glass circle */}\n            <circle cx=\"45\" cy=\"45\" r=\"30\" stroke=\"#fd7e14\" strokeWidth=\"10\" fill=\"none\"/>\n            {/* Magnifying glass handle */}\n            <line x1=\"68\" y1=\"68\" x2=\"85\" y2=\"85\" stroke=\"#fd7e14\" strokeWidth=\"12\" strokeLinecap=\"round\"/>\n            {/* Leaf inside the glass */}\n            <path d=\"M45,55 C35,55 30,45 35,35 C40,25 50,30 55,40 C60,50 55,55 45,55 Z\" fill=\"#28a745\"/>\n            <path d=\"M45,55 C47,45 55,43 55,35\" stroke=\"white\" strokeWidth=\"2\" fill=\"none\" strokeLinecap=\"round\"/>\n          </svg>\n          <span className=\"text-4xl text-[#343a40] font-semibold font-['Poppins',system-ui,-apple-system,sans-serif]\">YumTrack</span>\n        </div>\n        <p className=\"text-muted-foreground text-sm leading-relaxed\">Take a photo of your meal and get instant nutrition analysis powered by AI</p>\n      </header>\n\n      {/* Image Preview */}\n      {selectedImage && (\n        <Card className=\"overflow-hidden\">\n          <div className=\"aspect-square bg-muted\">\n            <img \n              src={selectedImage} \n              alt=\"Food preview\" \n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <CardContent className=\"p-4 flex justify-between items-center\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setSelectedImage(null)}\n            >\n              Retake\n            </Button>\n            <Button \n              onClick={() => {\n                if (selectedImage) {\n                  setCurrentView('analyzing');\n                  trackEvent('food_analysis_start', 'engagement', 'manual_analysis');\n                  analysisMutation.mutate(selectedImage);\n                }\n              }}\n              disabled={analysisMutation.isPending}\n              className=\"bg-primary text-primary-foreground shadow-lg hover:bg-primary/90\"\n            >\n              {analysisMutation.isPending ? 'Analyzing...' : 'Analyze Food'}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Upload Buttons */}\n      {!selectedImage && (\n        <div className=\"space-y-3\">\n          <Button \n            onClick={() => {\n              trackEvent('camera_open', 'engagement', 'photo_capture');\n              setCurrentView('camera');\n            }}\n            className=\"w-full bg-primary text-primary-foreground py-4 h-auto text-lg font-semibold shadow-lg hover:bg-primary/90\"\n          >\n            <Camera className=\"w-6 h-6 mr-3\" />\n            Take Photo\n          </Button>\n          \n          <Button \n            variant=\"outline\"\n            className=\"w-full py-4 h-auto text-lg font-semibold border-2 hover:border-primary hover:text-primary\"\n            onClick={() => {\n              trackEvent('gallery_open', 'engagement', 'image_upload');\n              const input = document.createElement('input');\n              input.type = 'file';\n              input.accept = 'image/*';\n              input.onchange = (e) => {\n                const file = (e.target as HTMLInputElement).files?.[0];\n                if (file) {\n                  const reader = new FileReader();\n                  reader.onload = (event) => {\n                    const imageData = event.target?.result as string;\n                    handleImageSelected(imageData);\n                  };\n                  reader.readAsDataURL(file);\n                }\n              };\n              input.click();\n            }}\n          >\n            <Image className=\"w-6 h-6 mr-3\" />\n            Choose from Gallery\n          </Button>\n        </div>\n      )}\n\n      {/* Recent Analysis */}\n      {recentAnalyses.length > 0 && (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Recent Analysis</h3>\n          {recentAnalyses.map((analysis) => (\n            <Card key={analysis.id} className=\"p-4\">\n              <div className=\"flex items-center space-x-4\">\n                <img \n                  src={analysis.imageUrl} \n                  alt={analysis.foodName}\n                  className=\"w-16 h-16 rounded-xl object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-foreground\">{analysis.foodName}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{analysis.calories} Kcal</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(analysis.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => {\n                    setAnalysisResult(analysis);\n                    setCurrentView('results');\n                  }}\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5l7 7-7 7\"></path>\n                  </svg>\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </main>\n  );\n});\n\nHome.displayName = 'Home';\n\nexport default Home;\n","size_bytes":10347},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { usePWA } from \"@/hooks/use-pwa\";\nimport { Download, Mail } from \"lucide-react\";\nimport { trackEvent } from \"@/lib/analytics\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport emailjs from \"@emailjs/browser\";\n\nconst contactSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\nexport default function Settings() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [isClearing, setIsClearing] = useState(false);\n  const [showContactModal, setShowContactModal] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { toast } = useToast();\n  const { canInstall, install, isInstalled, isInWebView } = usePWA();\n  const isMobile = useIsMobile();\n\n  const contactForm = useForm<z.infer<typeof contactSchema>>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n\n  useEffect(() => {\n    // Load settings from localStorage\n    const savedDarkMode = localStorage.getItem(\"nutrisnap-dark-mode\");\n\n    if (savedDarkMode !== null) setDarkMode(JSON.parse(savedDarkMode));\n  }, []);\n\n  const updateSetting = (key: string, value: boolean) => {\n    localStorage.setItem(key, JSON.stringify(value));\n    toast({\n      title: \"Settings updated\",\n      description: \"Your preferences have been saved.\",\n    });\n  };\n\n  const handleClearHistory = async () => {\n    setIsClearing(true);\n    try {\n      const response = await fetch(\"/api/food-analyses\", {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to clear history\");\n      }\n\n      toast({\n        title: \"History cleared\",\n        description: \"All analysis history has been removed.\",\n      });\n\n      // Refresh the cache to update any displayed data\n      window.location.reload();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear history. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsClearing(false);\n    }\n  };\n\n  const handleInstallApp = async () => {\n    trackEvent(\"pwa_install_attempt\", \"engagement\", \"settings_page\");\n\n    // Debug logging\n    console.log(\"Settings Install Debug:\", {\n      isInstalled,\n      canInstall,\n      isInWebView,\n      userAgent: navigator.userAgent,\n    });\n\n    // If in webview (messenger/kakaotalk), open in browser directly\n    if (isInWebView) {\n      const currentUrl = window.location.href;\n      const userAgent = navigator.userAgent.toLowerCase();\n\n      trackEvent(\"webview_browser_redirect\", \"engagement\", \"settings_install\");\n\n      // Try multiple methods to open in browser\n      let opened = false;\n\n      if (userAgent.includes(\"kakaotalk\")) {\n        // KakaoTalk specific methods\n        try {\n          // Method 1: KakaoTalk external browser\n          window.location.href = `kakaotalk://web/openExternal?url=${encodeURIComponent(currentUrl)}`;\n          opened = true;\n        } catch (e) {\n          console.log(\"KakaoTalk method 1 failed, trying fallback\");\n        }\n      } else if (\n        userAgent.includes(\"messenger\") ||\n        userAgent.includes(\"fban\") ||\n        userAgent.includes(\"fbav\")\n      ) {\n        // Facebook Messenger methods\n        try {\n          // Method 1: Android intent\n          if (userAgent.includes(\"android\")) {\n            window.location.href = `intent://${window.location.host}${window.location.pathname}#Intent;scheme=https;package=com.android.chrome;S.browser_fallback_url=${encodeURIComponent(currentUrl)};end`;\n            opened = true;\n          }\n        } catch (e) {\n          console.log(\"Messenger method 1 failed, trying fallback\");\n        }\n      }\n\n      // Universal fallback methods\n      if (!opened) {\n        try {\n          // Method 2: Try to open in new window/tab\n          const newWindow = window.open(currentUrl, \"_blank\");\n          if (newWindow) {\n            opened = true;\n          }\n        } catch (e) {\n          console.log(\"Window.open failed, trying location change\");\n        }\n      }\n\n      // Last resort: direct location change\n      if (!opened) {\n        window.location.href = currentUrl;\n      }\n\n      return;\n    }\n\n    // For regular browsers, attempt PWA installation\n    if (canInstall && install) {\n      try {\n        const installed = await install();\n        if (installed) {\n          trackEvent(\"pwa_install_success\", \"engagement\", \"settings_install\");\n          toast({\n            title: \"App installed\",\n            description: \"YumTrack has been added to your home screen.\",\n          });\n          return;\n        }\n      } catch (error) {\n        console.error(\"Installation failed:\", error);\n        trackEvent(\"pwa_install_failed\", \"engagement\", \"settings_install\");\n      }\n    } else {\n      // Check if app is already installed\n      if (isInstalled) {\n        toast({\n          title: \"App already installed\",\n          description: \"YumTrack is already installed on your home screen.\",\n        });\n        trackEvent(\"pwa_already_installed\", \"engagement\", \"settings_install\");\n      } else {\n        // If PWA install isn't available, show unavailable message\n        toast({\n          title: \"App already installed\",\n          description: \"YumTrack is already installed on your home screen.\",\n        });\n        trackEvent(\"pwa_install_unavailable\", \"engagement\", \"settings_install\");\n      }\n    }\n  };\n\n  const onContactSubmit = async (values: z.infer<typeof contactSchema>) => {\n    setIsSubmitting(true);\n    try {\n      // EmailJS configuration - temporary hardcoded values for testing\n      const serviceID = \"service_98xbwrl\";\n      const templateID = \"template_a9bagiw\";\n      const publicKey = \"CQ8ikKs9ILlgDBEPm\";\n\n      console.log(\"EmailJS Config:\", { serviceID, templateID, publicKey });\n\n      if (!serviceID || !templateID || !publicKey) {\n        throw new Error(\"EmailJS configuration missing\");\n      }\n\n      // Initialize EmailJS with public key\n      emailjs.init(publicKey);\n\n      const templateParams = {\n        from_name: values.name,\n        from_email: values.email,\n        to_email: \"uedu.dev@gmail.com\",\n        message: values.message,\n        app_name: \"YumTrack\",\n        subject: `YumTrack Support: Contact from ${values.name}`,\n      };\n\n      console.log(\"Sending email with params:\", templateParams);\n\n      const result = await emailjs.send(serviceID, templateID, templateParams);\n      console.log(\"EmailJS Success:\", result);\n\n      toast({\n        title: \"Message sent\",\n        description:\n          \"Your support request has been sent to W Soft Labs. We'll get back to you soon!\",\n      });\n\n      contactForm.reset();\n      setShowContactModal(false);\n    } catch (error) {\n      console.error(\"EmailJS error:\", error);\n      console.error(\"Error details:\", JSON.stringify(error));\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n      <header className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-foreground text-sm\">\n          Customize your YumTrack experience\n        </p>\n      </header>\n\n      {/* App Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">App Preferences</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n            <div className=\"space-y-0.5 flex-1\">\n              <Label htmlFor=\"dark-mode\">Dark Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Switch to dark theme\n              </p>\n            </div>\n            <Switch\n              id=\"dark-mode\"\n              checked={darkMode}\n              onCheckedChange={(checked) => {\n                setDarkMode(checked);\n                updateSetting(\"nutrisnap-dark-mode\", checked);\n                document.documentElement.classList.toggle(\"dark\", checked);\n              }}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* App Installation - Mobile Only */}\n      {isMobile && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Install App</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isInstalled ? (\n              <div className=\"text-center space-y-3\">\n                <div className=\"w-12 h-12 mx-auto flex items-center justify-center bg-green-100 dark:bg-green-900 rounded-full\">\n                  <svg\n                    className=\"w-6 h-6 text-green-600 dark:text-green-400\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M5 13l4 4L19 7\"\n                    ></path>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">\n                    App Already Installed\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    YumTrack is installed on your home screen\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <>\n                <Button\n                  variant=\"default\"\n                  className=\"w-full justify-start\"\n                  onClick={handleInstallApp}\n                  disabled={false}\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Install\n                </Button>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {isInWebView\n                    ? \"You're in a messenger app. Tap Install to learn how to open in your browser first.\"\n                    : \"Install YumTrack on your device for faster access and an app-like experience\"}\n                </p>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Data Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Data Management</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              >\n                <svg\n                  className=\"w-4 h-4 mr-2\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\n                  ></path>\n                </svg>\n                Clear All History\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Clear All History</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to clear all analysis history? This will\n                  permanently delete all your food analyses and cannot be\n                  undone.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={handleClearHistory}\n                  disabled={isClearing}\n                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                >\n                  {isClearing ? \"Clearing...\" : \"Clear History\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </CardContent>\n      </Card>\n\n      {/* App Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">About</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center space-y-2\">\n            <div className=\"w-16 h-16 mx-auto flex items-center justify-center\">\n              <svg\n                width=\"64\"\n                height=\"64\"\n                viewBox=\"0 0 100 100\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                {/* Magnifying glass circle */}\n                <circle\n                  cx=\"45\"\n                  cy=\"45\"\n                  r=\"30\"\n                  stroke=\"#fd7e14\"\n                  strokeWidth=\"10\"\n                  fill=\"none\"\n                />\n                {/* Magnifying glass handle */}\n                <line\n                  x1=\"68\"\n                  y1=\"68\"\n                  x2=\"85\"\n                  y2=\"85\"\n                  stroke=\"#fd7e14\"\n                  strokeWidth=\"12\"\n                  strokeLinecap=\"round\"\n                />\n                {/* Leaf inside the glass */}\n                <path\n                  d=\"M45,55 C35,55 30,45 35,35 C40,25 50,30 55,40 C60,50 55,55 45,55 Z\"\n                  fill=\"#28a745\"\n                />\n                <path\n                  d=\"M45,55 C47,45 55,43 55,35\"\n                  stroke=\"white\"\n                  strokeWidth=\"2\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"font-semibold text-foreground\">YumTrack</h3>\n            <p className=\"text-sm text-muted-foreground\">Version 1.0.0</p>\n            <p className=\"text-xs text-muted-foreground\">\n              AI-powered nutrition analysis\n            </p>\n          </div>\n\n          <div className=\"text-center space-y-2\">\n            <Button variant=\"link\" className=\"text-sm\">\n              Privacy Policy\n            </Button>\n            <Button variant=\"link\" className=\"text-sm\">\n              Terms of Service\n            </Button>\n            <Button\n              variant=\"link\"\n              className=\"text-sm\"\n              onClick={() => setShowContactModal(true)}\n            >\n              Contact Support\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Support Modal */}\n      <AlertDialog open={showContactModal} onOpenChange={setShowContactModal}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Contact Support</AlertDialogTitle>\n            <AlertDialogDescription>\n              Send a message to W Soft Labs support team. We'll get back to you\n              as soon as possible.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n\n          <Form {...contactForm}>\n            <form\n              onSubmit={contactForm.handleSubmit(onContactSubmit)}\n              className=\"space-y-4\"\n            >\n              <FormField\n                control={contactForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Your name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={contactForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"your@email.com\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={contactForm.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe your issue, feature request, or question...\"\n                        rows={4}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setShowContactModal(false)}>\n                  Cancel\n                </AlertDialogCancel>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? (\n                    <>\n                      <Mail className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      Send Message\n                    </>\n                  )}\n                </Button>\n              </AlertDialogFooter>\n            </form>\n          </Form>\n        </AlertDialogContent>\n      </AlertDialog>\n    </main>\n  );\n}\n","size_bytes":18933},"client/src/pages/stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { FoodAnalysis } from \"@shared/schema\";\nimport { startOfWeek, endOfWeek, isWithinInterval, format } from \"date-fns\";\n\nexport default function Stats() {\n  const { data: analyses = [], isLoading } = useQuery<FoodAnalysis[]>({\n    queryKey: ['/api/food-analyses'],\n  });\n\n  // Calculate weekly stats\n  const thisWeek = {\n    start: startOfWeek(new Date()),\n    end: endOfWeek(new Date()),\n  };\n\n  const weeklyAnalyses = analyses.filter(analysis => \n    isWithinInterval(new Date(analysis.createdAt), thisWeek)\n  );\n\n  const weeklyCalories = weeklyAnalyses.reduce((sum, analysis) => sum + analysis.calories, 0);\n  const weeklyProtein = weeklyAnalyses.reduce((sum, analysis) => sum + analysis.protein, 0);\n  const avgCaloriesPerMeal = weeklyAnalyses.length > 0 ? Math.round(weeklyCalories / weeklyAnalyses.length) : 0;\n\n  // Most analyzed foods\n  const foodCounts = analyses.reduce((acc, analysis) => {\n    acc[analysis.foodName] = (acc[analysis.foodName] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const topFoods = Object.entries(foodCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5);\n\n  if (isLoading) {\n    return (\n      <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-48 mx-auto\"></div>\n          <div className=\"h-4 bg-muted rounded w-32 mx-auto\"></div>\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-muted rounded w-24 mb-4\"></div>\n                <div className=\"h-12 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-sm mx-auto px-4 py-6 space-y-6\">\n      <header className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold text-foreground\">Nutrition Stats</h1>\n        <p className=\"text-muted-foreground text-sm\">Track your weekly nutrition patterns</p>\n      </header>\n\n      {/* Weekly Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">This Week</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {format(thisWeek.start, 'MMM d')} - {format(thisWeek.end, 'MMM d')}\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-foreground\">{weeklyAnalyses.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Meals Analyzed</div>\n            </div>\n            <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-foreground\">{weeklyCalories.toLocaleString()}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Kcal</div>\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-foreground\">{avgCaloriesPerMeal}</div>\n            <div className=\"text-sm text-muted-foreground\">Avg Kcal/Meal</div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Nutrition Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Weekly Nutrition</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span>Protein</span>\n              <span>{Math.round(weeklyProtein)}g</span>\n            </div>\n            <Progress value={Math.min((weeklyProtein / 150) * 100, 100)} className=\"h-2\" />\n          </div>\n          \n          <div>\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span>Kcal</span>\n              <span>{weeklyCalories.toLocaleString()}</span>\n            </div>\n            <Progress value={Math.min((weeklyCalories / 14000) * 100, 100)} className=\"h-2\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Top Foods */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Most Analyzed Foods</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {topFoods.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground text-center py-4\">\n              No food data available yet\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {topFoods.map(([food, count], index) => (\n                <div key={food} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-primary\">{index + 1}</span>\n                    </div>\n                    <span className=\"font-medium text-foreground text-sm\">{food}</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{count} times</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Total Analysis Count */}\n      <Card>\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"text-3xl font-bold text-foreground mb-2\">{analyses.length}</div>\n          <div className=\"text-sm text-muted-foreground\">Total Foods Analyzed</div>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n","size_bytes":5823},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}